#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, wing1, wing2, wing3, w1, w2, w3;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	turn wing1 to x-axis <-90.000000> speed <90.000000>;
	turn wing2 to x-axis <-90.000000> speed <90.000000>;
	turn wing3 to x-axis <-90.000000> speed <90.000000>;
}

deactivatescr()
{
	turn wing1 to x-axis <0.000000> speed <90.000000>;
	turn wing2 to x-axis <0.000000> speed <90.000000>;
	turn wing3 to x-axis <0.000000> speed <90.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MoveRate2()
{
	sleep 150;
	if( Rand( 1, 2 ) == 1 )
	{
		turn base to z-axis <250.000000> speed <120.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.000000> speed <120.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.000000>;
	}
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 3 )
		{
			emit-sfx 256 | 3 from body;
			emit-sfx 256 | 3 from wing2;
			emit-sfx 256 | 3 from wing3;
		}
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Create()
{
	turn w2 to z-axis <-120.000000> now;
	turn w3 to z-axis <120.000000> now;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD | SHATTER;
		explode wing2 type NOHEATCLOUD;
		explode wing1 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER;
		explode wing1 type NOHEATCLOUD | SHATTER;
		explode wing3 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode wing2 type NOHEATCLOUD | SHATTER;
		explode wing3 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode wing1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode wing2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
