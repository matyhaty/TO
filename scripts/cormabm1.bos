#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, anti, LFwheel, RFwheel, Guard1, Guard3, LRwheel, RRwheel,
       Guard2, Guard4, box;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


imobile()
{
	stop-spin LFwheel around x-axis;
	stop-spin RFwheel around x-axis;
	stop-spin LRwheel around x-axis;
	stop-spin RRwheel around x-axis;
	if( TRUE )
	{
		move LFwheel to x-axis [0.000000] now;
		move LFwheel to x-axis [2.000000] speed [7.000000];
		move RFwheel to x-axis [0.000000] now;
		move RFwheel to x-axis [-2.000000] speed [7.000000];
		sleep 256;
	}
	if( TRUE )
	{
		move Guard1 to x-axis [-3.050000] speed [11.000000];
		move Guard3 to x-axis [3.050000] speed [11.000000];
		move LRwheel to x-axis [2.000000] speed [7.000000];
		move RRwheel to x-axis [-1.989996] speed [7.000000];
		sleep 266;
	}
	if( TRUE )
	{
		move Guard1 to y-axis [-3.350000] speed [12.000000];
		move Guard2 to x-axis [-3.050000] speed [11.000000];
		move Guard3 to y-axis [-3.339996] speed [12.000000];
		move Guard4 to x-axis [3.050000] speed [11.000000];
		sleep 265;
	}
	if( TRUE )
	{
		move Guard2 to y-axis [-3.350000] speed [12.000000];
		move Guard4 to y-axis [-3.350000] speed [12.000000];
		sleep 266;
	}
	sleep 7;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

mobile()
{
	if( TRUE )
	{
		move Guard1 to x-axis [-3.050000] now;
		move Guard1 to y-axis [-3.350000] now;
		move Guard2 to x-axis [-3.050000] now;
		move Guard2 to y-axis [-3.350000] now;
		move Guard2 to y-axis [0.000000] speed [12.000000];
		move Guard3 to x-axis [3.050000] now;
		move Guard3 to y-axis [-3.339996] now;
		move Guard4 to x-axis [3.050000] now;
		move Guard4 to y-axis [-3.350000] now;
		move Guard4 to y-axis [0.000000] speed [12.000000];
		move LFwheel to x-axis [2.000000] now;
		move LRwheel to x-axis [2.000000] now;
		move RFwheel to x-axis [-2.000000] now;
		move RRwheel to x-axis [-1.989996] now;
		sleep 260;
	}
	if( TRUE )
	{
		move Guard1 to y-axis [0.000000] speed [12.000000];
		move Guard2 to x-axis [0.000000] speed [11.000000];
		move Guard3 to y-axis [0.000000] speed [12.000000];
		move Guard4 to x-axis [0.000000] speed [11.000000];
		sleep 265;
	}
	if( TRUE )
	{
		move Guard1 to x-axis [0.000000] speed [11.000000];
		move Guard3 to x-axis [0.000000] speed [11.000000];
		move LRwheel to x-axis [0.000000] speed [7.000000];
		move RRwheel to x-axis [0.000000] speed [7.000000];
		sleep 265;
	}
	if( TRUE )
	{
		move LFwheel to x-axis [0.000000] speed [7.000000];
		move RFwheel to x-axis [0.000000] speed [7.000000];
		sleep 267;
	}
	spin LFwheel around x-axis speed <150.032967>;
	spin RFwheel around x-axis speed <150.032967>;
	spin LRwheel around x-axis speed <150.032967>;
	spin RRwheel around x-axis speed <150.032967>;
	sleep 8;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Go()
{
	call-script mobile();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script imobile();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 10000;
	call-script InitState();
	start-script SmokeUnit();
}

StartMoving()
{
	start-script RequestState(0);
}

StopMoving()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	turn box to x-axis <0.000000> speed <100.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn box to x-axis <-90.021978> speed <400.000000>;
	wait-for-turn box around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 100;
}

QueryPrimary(piecenum)
{
	piecenum = anti;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode box type NOHEATCLOUD;
		explode anti type NOHEATCLOUD;
		explode Guard1 type NOHEATCLOUD;
		explode Guard2 type NOHEATCLOUD;
		explode Guard3 type NOHEATCLOUD;
		explode Guard4 type NOHEATCLOUD;
		explode LFwheel type NOHEATCLOUD;
		explode RFwheel type NOHEATCLOUD;
		explode LRwheel type NOHEATCLOUD;
		explode RRwheel type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode box type NOHEATCLOUD | SHATTER;
		explode anti type NOHEATCLOUD | FALL;
		explode Guard1 type NOHEATCLOUD | FALL;
		explode Guard2 type NOHEATCLOUD | FALL;
		explode Guard3 type NOHEATCLOUD | FALL;
		explode Guard4 type NOHEATCLOUD | FALL;
		explode LFwheel type NOHEATCLOUD | FALL;
		explode RFwheel type NOHEATCLOUD | FALL;
		explode LRwheel type NOHEATCLOUD | FALL;
		explode RRwheel type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode box type NOHEATCLOUD | SHATTER;
		explode anti type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode Guard1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode Guard2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode Guard3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode Guard4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode LFwheel type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode RFwheel type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode LRwheel type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode RRwheel type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode box type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode anti type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode Guard1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode Guard2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode Guard3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode Guard4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode LFwheel type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode RFwheel type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode LRwheel type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode RRwheel type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
