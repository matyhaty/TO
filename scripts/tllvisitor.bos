#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, launcher, flare3, flare4, wake1, wake2,
       wake3, l1, l2, flare1a, flare2a, flare1b, flare2b, flare1c,
       flare2c, door1, door2;

static-var  Static_Var_1, gun_1, gun_2, restore_delay, statechg_DesiredState,
            statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from launcher;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from flare1a;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	move door1 to z-axis [-15.000000] speed [10.000000];
	move door2 to z-axis [-15.000000] speed [10.000000];
	wait-for-move door2 along z-axis;
	move l1 to y-axis [2.000000] speed [5.000000];
	move l2 to y-axis [2.000000] speed [5.000000];
	wait-for-move l2 along y-axis;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	sleep 1500;
	move l1 to y-axis [0.000000] speed [5.000000];
	move l2 to y-axis [0.000000] speed [5.000000];
	wait-for-move l2 along y-axis;
	move door1 to z-axis [0.000000] speed [5.000000];
	move door2 to z-axis [0.000000] speed [5.000000];
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare1a;
	hide flare2a;
	hide flare1b;
	hide flare2b;
	hide flare1c;
	hide flare2c;
	Static_Var_1 = 0;
	gun_1 = base;
	gun_2 = base;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn launcher to x-axis <0.000000> speed <70.000000>;
	turn turret to y-axis <0.000000> speed <30.000000>;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret to y-axis heading speed <160.000000>;
	turn launcher to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 >= 5 )
	{
		gun_1 = body;
	}
}

FireSecondary()
{
	gun_2 = !gun_2;
}

AimFromPrimary(piecenum)
{
	piecenum = l1;
}

AimFromSecondary(piecenum)
{
	piecenum = launcher;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2a;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare1b;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare2b;
	}
	if( gun_1 == 4 )
	{
		piecenum = flare1c;
	}
	if( gun_1 == 5 )
	{
		piecenum = flare2c;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare3;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare4;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	explode base type NOHEATCLOUD;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode flare1a type NOHEATCLOUD;
	explode flare4 type NOHEATCLOUD;
	explode wake1 type NOHEATCLOUD;
	explode wake2 type NOHEATCLOUD;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode l1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
	explode door2 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
	explode launcher type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | SHATTER;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode l1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode l2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
	return (corpsetype);
}
