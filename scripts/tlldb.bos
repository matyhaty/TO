#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeves, barrel1, barrel2, barrel3, barrel4,
       sleeves2, flare1, flare2, flare3, flare4, mflare1, mflare2, s1,
       s2, m1, m2;

static-var  restore_delay, gun_1, Static_Var_3;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from body;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from barrel1;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from sleeves;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-cache s1;
	dont-cache s2;
	dont-cache m1;
	dont-cache m2;
	dont-cache sleeves;
	dont-cache sleeves2;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-cache barrel4;
	dont-cache turret;
	dont-cache flare2;
	dont-cache flare1;
	dont-cache flare3;
	dont-cache flare4;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	gun_1 = body;
	Static_Var_3 = 1;
	turn sleeves2 to x-axis <-45.000000> now;
	restore_delay = 3000;
	start-script SmokeUnit();
	return (1);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn sleeves to x-axis <0.000000> speed <76.516484>;
	turn turret to y-axis <0.000000> speed <76.516484>;
	wait-for-turn sleeves around y-axis;
	wait-for-turn turret around x-axis;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <229.549451>;
	turn sleeves to x-axis <0.000000> - pitch speed <229.549451>;
	wait-for-turn sleeves around x-axis;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		move barrel1 to z-axis [-1.500000] speed [60.000000];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [30.000000];
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 == 2 )
	{
		move barrel2 to z-axis [-1.500000] speed [60.000000];
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [30.000000];
		show flare2;
		sleep 150;
		hide flare2;
	}
	if( gun_1 == 3 )
	{
		move barrel3 to z-axis [-1.500000] speed [60.000000];
		wait-for-move barrel3 along z-axis;
		move barrel3 to z-axis [0.000000] speed [30.000000];
		show flare3;
		sleep 150;
		hide flare3;
	}
	if( gun_1 == 4 )
	{
		move barrel4 to z-axis [-1.500000] speed [60.000000];
		wait-for-move barrel4 along z-axis;
		move barrel4 to z-axis [0.000000] speed [30.000000];
		show flare4;
		sleep 150;
		hide flare4;
	}
	++gun_1;
	if( gun_1 == 5 )
	{
		gun_1 = body;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare3;
	}
	if( gun_1 == 4 )
	{
		piecenum = flare4;
	}
}

QuerySecondary(piecenum)
{
	piecenum = mflare1;
}

QueryTertiary(piecenum)
{
	piecenum = mflare2;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret type NOHEATCLOUD | SHATTER | FALL;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD | FALL;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		explode barrel4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode turret type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2 type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		explode barrel4 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode turret type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD;
	explode sleeves type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD;
	explode barrel1 type NOHEATCLOUD;
	explode barrel3 type NOHEATCLOUD;
	explode barrel4 type NOHEATCLOUD;
	return (corpsetype);
}
