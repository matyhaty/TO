#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body1, lgant, ltower1, lnano1, beam1, beam2, command1,
       rgant, rtower1, rnano1, beam3, beam4, node1, slip, body2,
       rgant2, rtower2, rnano2, beam5, beam6, command2, lgant2, ltower2,
       lnano2, beam7, beam8, node2;

static-var  Static_Var_1, unitviewer, Static_Var_3, statechg_DesiredState, statechg_StateChanging,
            Static_Var_6;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	move base to y-axis [22.000000] speed [15.000000];
	wait-for-move base along y-axis;
	dont-cache rtower1;
	dont-cache rtower2;
	dont-cache ltower1;
	dont-cache ltower2;
	dont-cache rnano1;
	dont-cache rnano2;
	dont-cache lnano1;
	dont-cache lnano2;
	turn lnano1 to z-axis <25.000000> speed <60.000000>;
	turn rnano1 to z-axis <-25.000000> speed <60.000000>;
	turn lnano2 to z-axis <25.000000> speed <60.000000>;
	turn rnano2 to z-axis <-25.000000> speed <60.000000>;
	turn ltower1 to y-axis <15.000000> speed <60.000000>;
	turn ltower2 to y-axis <-15.000000> speed <60.000000>;
	turn rtower2 to y-axis <15.000000> speed <60.000000>;
	turn rtower1 to y-axis <-15.000000> speed <60.000000>;
	sleep 600;
}

deactivatescr()
{
	turn lnano1 to z-axis <0.000000> speed <30.000000>;
	turn rnano1 to z-axis <0.000000> speed <30.000000>;
	turn lnano2 to z-axis <0.000000> speed <30.000000>;
	turn rnano2 to z-axis <0.000000> speed <30.000000>;
	turn ltower1 to y-axis <0.000000> speed <30.000000>;
	turn ltower2 to y-axis <0.000000> speed <30.000000>;
	turn rtower2 to y-axis <0.000000> speed <30.000000>;
	turn rtower1 to y-axis <0.000000> speed <30.000000>;
	wait-for-turn rtower1 around y-axis;
	wait-for-turn lnano1 around z-axis;
	cache rtower1;
	cache rtower2;
	cache ltower1;
	cache ltower2;
	cache rnano1;
	cache rnano2;
	cache lnano1;
	cache lnano2;
	move base to y-axis [0.000000] speed [15.000000];
	wait-for-move base along y-axis;
	sleep 600;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 3;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 3;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	sleep 10000;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 1;
	dont-shade lnano1;
	dont-shade rnano1;
	dont-shade lnano2;
	dont-shade rnano2;
	dont-shade ltower1;
	dont-shade rtower1;
	dont-shade ltower2;
	dont-shade rtower2;
	unitviewer = FALSE;
	Static_Var_6 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = beam2;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = beam3;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = beam4;
	}
	if( Static_Var_1 == 5 )
	{
		piecenum = beam5;
	}
	if( Static_Var_1 == 6 )
	{
		piecenum = beam6;
	}
	if( Static_Var_1 == 7 )
	{
		piecenum = beam7;
	}
	if( Static_Var_1 == 8 )
	{
		piecenum = beam8;
	}
	++Static_Var_1;
	if( Static_Var_1 == 9 )
	{
		Static_Var_1 = 1;
	}
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
}

Deactivate()
{
	Static_Var_6 = 0;
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = slip;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode body1 type NOHEATCLOUD;
		explode lgant type NOHEATCLOUD;
		explode ltower1 type NOHEATCLOUD;
		explode lnano1 type NOHEATCLOUD;
		explode beam1 type NOHEATCLOUD;
		explode beam2 type NOHEATCLOUD;
		explode command1 type NOHEATCLOUD;
		explode rgant type NOHEATCLOUD;
		explode rtower1 type NOHEATCLOUD;
		explode rnano1 type NOHEATCLOUD;
		explode beam3 type NOHEATCLOUD;
		explode beam4 type NOHEATCLOUD;
		explode node1 type NOHEATCLOUD;
		explode slip type NOHEATCLOUD;
		explode body2 type NOHEATCLOUD;
		explode rgant2 type NOHEATCLOUD;
		explode rtower2 type NOHEATCLOUD;
		explode rnano2 type NOHEATCLOUD;
		explode beam5 type NOHEATCLOUD;
		explode beam6 type NOHEATCLOUD;
		explode command2 type NOHEATCLOUD;
		explode lgant2 type NOHEATCLOUD;
		explode ltower2 type NOHEATCLOUD;
		explode lnano2 type NOHEATCLOUD;
		explode beam7 type NOHEATCLOUD;
		explode beam8 type NOHEATCLOUD;
		explode node2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER;
		explode body1 type NOHEATCLOUD | SHATTER;
		explode lgant type NOHEATCLOUD | SHATTER;
		explode ltower1 type NOHEATCLOUD | SHATTER;
		explode lnano1 type NOHEATCLOUD | SHATTER;
		explode beam1 type NOHEATCLOUD;
		explode beam2 type NOHEATCLOUD;
		explode command1 type NOHEATCLOUD | SHATTER;
		explode rgant type NOHEATCLOUD | SHATTER;
		explode rtower1 type NOHEATCLOUD | SHATTER;
		explode rnano1 type NOHEATCLOUD | SHATTER;
		explode beam3 type NOHEATCLOUD;
		explode beam4 type NOHEATCLOUD;
		explode node1 type NOHEATCLOUD | SHATTER;
		explode slip type NOHEATCLOUD;
		explode body2 type NOHEATCLOUD | SHATTER;
		explode rgant2 type NOHEATCLOUD | SHATTER;
		explode rtower2 type NOHEATCLOUD | SHATTER;
		explode rnano2 type NOHEATCLOUD | SHATTER;
		explode beam5 type NOHEATCLOUD;
		explode beam6 type NOHEATCLOUD;
		explode command2 type NOHEATCLOUD | SHATTER;
		explode lgant2 type NOHEATCLOUD | SHATTER;
		explode ltower2 type NOHEATCLOUD | SHATTER;
		explode lnano2 type NOHEATCLOUD | SHATTER;
		explode beam7 type NOHEATCLOUD;
		explode beam8 type NOHEATCLOUD;
		explode node2 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | SHATTER;
		explode body1 type NOHEATCLOUD | SHATTER;
		explode lgant type NOHEATCLOUD | SHATTER;
		explode ltower1 type NOHEATCLOUD | SHATTER;
		explode lnano1 type NOHEATCLOUD | SHATTER;
		explode beam1 type NOHEATCLOUD;
		explode beam2 type NOHEATCLOUD;
		explode command1 type NOHEATCLOUD | SHATTER;
		explode rgant type NOHEATCLOUD | SHATTER;
		explode rtower1 type NOHEATCLOUD | SHATTER;
		explode rnano1 type NOHEATCLOUD | SHATTER;
		explode beam3 type NOHEATCLOUD;
		explode beam4 type NOHEATCLOUD;
		explode node1 type NOHEATCLOUD | SHATTER;
		explode slip type NOHEATCLOUD;
		explode body2 type NOHEATCLOUD | SHATTER;
		explode rgant2 type NOHEATCLOUD | SHATTER;
		explode rtower2 type NOHEATCLOUD | SHATTER;
		explode rnano2 type NOHEATCLOUD | SHATTER;
		explode beam5 type NOHEATCLOUD;
		explode beam6 type NOHEATCLOUD;
		explode command2 type NOHEATCLOUD | SHATTER;
		explode lgant2 type NOHEATCLOUD | SHATTER;
		explode ltower2 type NOHEATCLOUD | SHATTER;
		explode lnano2 type NOHEATCLOUD | SHATTER;
		explode beam7 type NOHEATCLOUD;
		explode beam8 type NOHEATCLOUD;
		explode node2 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | SHATTER;
	explode body1 type NOHEATCLOUD | SHATTER;
	explode lgant type NOHEATCLOUD | SHATTER;
	explode ltower1 type NOHEATCLOUD | SHATTER;
	explode lnano1 type NOHEATCLOUD | SHATTER;
	explode beam1 type NOHEATCLOUD;
	explode beam2 type NOHEATCLOUD;
	explode command1 type NOHEATCLOUD | SHATTER;
	explode rgant type NOHEATCLOUD | SHATTER;
	explode rtower1 type NOHEATCLOUD | SHATTER;
	explode rnano1 type NOHEATCLOUD | SHATTER;
	explode beam3 type NOHEATCLOUD;
	explode beam4 type NOHEATCLOUD;
	explode node1 type NOHEATCLOUD | SHATTER;
	explode slip type NOHEATCLOUD;
	explode body2 type NOHEATCLOUD | SHATTER;
	explode rgant2 type NOHEATCLOUD | SHATTER;
	explode rtower2 type NOHEATCLOUD | SHATTER;
	explode rnano2 type NOHEATCLOUD | SHATTER;
	explode beam5 type NOHEATCLOUD;
	explode beam6 type NOHEATCLOUD;
	explode command2 type NOHEATCLOUD | SHATTER;
	explode lgant2 type NOHEATCLOUD | SHATTER;
	explode ltower2 type NOHEATCLOUD | SHATTER;
	explode lnano2 type NOHEATCLOUD | SHATTER;
	explode beam7 type NOHEATCLOUD;
	explode beam8 type NOHEATCLOUD;
	explode node2 type NOHEATCLOUD | SHATTER;
	return (corpsetype);
}
