#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, anglea, angleb, anglec, angled, tower, top,
       panels, panela, panelb, panelc, paneld, p1, p2, p3,
       p4, dish1, dish2, dish3, dish4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, statechg_DesiredState,
            statechg_StateChanging, Static_Var_7, Static_Var_8, Static_Var_9;


HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_7 == 0 )
		{
			Static_Var_7 = 1;
			hide dish1;
			explode dish1 type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_8 == 0 )
		{
			Static_Var_8 = 1;
			hide panelb;
			explode panelb type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 35 )
	{
		if( Static_Var_9 == 0 )
		{
			Static_Var_9 = 1;
			hide anglec;
			explode anglec type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	signal 16;
	set-signal-mask 16;
	set ACTIVATION to 0;
	sleep 16000;
	set ACTIVATION to 1;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	Static_Var_9 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 40 )
		{
			if( Static_Var_9 == 1 )
			{
				Static_Var_9 = 0;
				show anglec;
			}
		}
		if( healthpercent >= 60 )
		{
			if( Static_Var_8 == 1 )
			{
				Static_Var_8 = 0;
				show panelb;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_7 == 1 )
			{
				Static_Var_7 = 0;
				show dish1;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache top;
	dont-cache p1;
	dont-cache p2;
	dont-cache p3;
	dont-cache p4;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache panela;
	dont-cache panelb;
	dont-cache panelc;
	dont-cache paneld;
	set ARMORED to 0;
	move anglea to z-axis [5.500000] speed [8.000000];
	move anglea to x-axis [5.500000] speed [8.000000];
	move angleb to z-axis [5.500000] speed [8.000000];
	move angleb to x-axis [-5.500000] speed [8.000000];
	move anglec to z-axis [-5.500000] speed [8.000000];
	move anglec to x-axis [-5.500000] speed [8.000000];
	move angled to z-axis [-5.500000] speed [8.000000];
	move angled to x-axis [5.500000] speed [8.000000];
	sleep 650;
	move tower to y-axis [0.000000] speed [20.000000];
	show tower;
	wait-for-move tower along y-axis;
	turn panela to x-axis <0.000000> speed <80.000000>;
	turn panelc to x-axis <0.000000> speed <80.000000>;
	turn panelb to z-axis <0.000000> speed <80.000000>;
	turn paneld to z-axis <0.000000> speed <80.000000>;
	turn dish1 to x-axis <70.000000> speed <85.000000>;
	turn dish3 to x-axis <-70.000000> speed <85.000000>;
	turn dish2 to z-axis <-70.000000> speed <85.000000>;
	turn dish4 to z-axis <70.000000> speed <85.000000>;
	sleep 750;
	turn p1 to z-axis <-35.000000> speed <30.000000>;
	turn p3 to z-axis <35.000000> speed <30.000000>;
	turn p2 to x-axis <-35.000000> speed <30.000000>;
	turn p4 to x-axis <35.000000> speed <30.000000>;
	wait-for-turn dish1 around x-axis;
	spin top around y-axis speed Static_Var_2;
	Static_Var_4 = 1;
}

Stop()
{
	Static_Var_4 = 0;
	turn panela to x-axis <90.000000> speed <90.000000>;
	turn panelc to x-axis <-90.000000> speed <90.000000>;
	turn panelb to z-axis <90.000000> speed <90.000000>;
	turn paneld to z-axis <-90.000000> speed <90.000000>;
	spin top around y-axis speed <0.000000>;
	turn p1 to z-axis <0.000000> speed <30.000000>;
	turn p3 to z-axis <0.000000> speed <30.000000>;
	turn p2 to x-axis <0.000000> speed <30.000000>;
	turn p4 to x-axis <0.000000> speed <30.000000>;
	sleep 500;
	turn top to y-axis <0.000000> speed <90.000000>;
	wait-for-turn top around y-axis;
	turn dish1 to x-axis <0.000000> speed <105.000000>;
	turn dish3 to x-axis <0.000000> speed <105.000000>;
	turn dish2 to z-axis <0.000000> speed <105.000000>;
	turn dish4 to z-axis <0.000000> speed <105.000000>;
	wait-for-turn dish1 around x-axis;
	wait-for-turn dish2 around x-axis;
	wait-for-turn dish3 around z-axis;
	wait-for-turn dish4 around z-axis;
	move tower to y-axis [-25.000000] speed [20.000000];
	sleep 1000;
	hide tower;
	sleep 300;
	wait-for-move tower along y-axis;
	move anglea to z-axis [0.000000] speed [8.000000];
	move anglea to x-axis [0.000000] speed [8.000000];
	move angleb to z-axis [0.000000] speed [8.000000];
	move angleb to x-axis [0.000000] speed [8.000000];
	move anglec to z-axis [0.000000] speed [8.000000];
	move anglec to x-axis [0.000000] speed [8.000000];
	move angled to z-axis [0.000000] speed [8.000000];
	move angled to x-axis [0.000000] speed [8.000000];
	cache top;
	cache dish1;
	cache dish2;
	cache dish3;
	cache dish4;
	cache panela;
	cache panelb;
	cache panelc;
	cache paneld;
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide tower;
	dont-cache tower;
	dont-cache top;
	dont-cache p1;
	dont-cache p2;
	dont-cache p3;
	dont-cache p4;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache panela;
	dont-cache panelb;
	dont-cache panelc;
	dont-cache paneld;
	dont-shade tower;
	dont-shade anglea;
	dont-shade angleb;
	dont-shade anglec;
	dont-shade angled;
	Static_Var_2 = 910;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	move tower to y-axis [-25.000000] now;
	turn panela to x-axis <90.000000> now;
	turn panelc to x-axis <-90.000000> now;
	turn panelb to z-axis <90.000000> now;
	turn paneld to z-axis <-90.000000> now;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetSpeed(Func_Var_1, Func_Var_2)
{
	if( get BUILD_PERCENT_LEFT == 0 )
	{
		Static_Var_2 = Func_Var_1 / 3;
		if( !Static_Var_4 )
		{
			Func_Var_1 = 0;
		}
		Func_Var_2 = Func_Var_1 / 3;
		spin top around y-axis speed Func_Var_2;
		if( !Static_Var_4 )
		{
			turn top to y-axis <0.000000> speed <40.000000>;
		}
		sleep 100;
	}
	sleep 100;
}

SetDirection(heading)
{
	if( get BUILD_PERCENT_LEFT == 0 )
	{
		Static_Var_3 = heading;
		if( !Static_Var_4 )
		{
			heading = 0;
		}
		sleep 100;
	}
	sleep 100;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode top type NOHEATCLOUD;
		explode tower type NOHEATCLOUD;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode top type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode panela type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode dish2 type NOHEATCLOUD | SHATTER;
		explode panela type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode anglea type NOHEATCLOUD | SHATTER;
	explode panela type NOHEATCLOUD;
	return (corpsetype);
}
