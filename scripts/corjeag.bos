#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Base, Body, Turret, Launcher, Flare, PanelL, PanelR;

static-var  restore_delay, unitviewer;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn Base to x-axis anglex speed <50.000000>;
	turn Base to z-axis anglez speed <50.000000>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <20.000000>;
	turn Base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(anglex, anglez)
{
	turn Base to z-axis anglez speed <105.000000>;
	turn Base to x-axis anglex speed <105.000000>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.000000>;
	turn Base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	unitviewer = FALSE;
	restore_delay = 2000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn Turret to y-axis <0.000000> speed <220.000000>;
	turn Launcher to x-axis <0.000000> speed <230.000000>;
	wait-for-turn Turret around y-axis;
	wait-for-turn Launcher around x-axis;
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = Body;
}

QueryPrimary(piecenum)
{
	piecenum = Flare;
}

AimFromPrimary(piecenum)
{
	piecenum = Turret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move Turret to y-axis [2.000000] speed [5.000000];
	turn PanelL to z-axis <44.005495> speed <50.000000>;
	move PanelL to x-axis [4.000000] speed [9.000000];
	move PanelL to y-axis [-2.000000] speed [2.000000];
	turn PanelR to z-axis <-44.005495> speed <50.000000>;
	move PanelR to x-axis [-4.000000] speed [9.000000];
	move PanelR to y-axis [-2.000000] speed [2.000000];
	wait-for-move Turret along y-axis;
	wait-for-turn PanelL around z-axis;
	wait-for-move PanelL along x-axis;
	wait-for-move PanelL along y-axis;
	wait-for-turn PanelR around z-axis;
	wait-for-move PanelR along x-axis;
	wait-for-move PanelR along y-axis;
	turn Turret to y-axis heading speed <180.000000>;
	turn Launcher to x-axis <0.000000> - pitch speed <190.000000>;
	wait-for-turn Turret around y-axis;
	wait-for-turn Launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 150;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Base type NOHEATCLOUD;
		explode Body type NOHEATCLOUD;
		explode Turret type NOHEATCLOUD;
		explode Launcher type NOHEATCLOUD;
		explode Flare type NOHEATCLOUD;
		explode PanelL type NOHEATCLOUD;
		explode PanelR type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Base type NOHEATCLOUD | SHATTER;
		explode Body type NOHEATCLOUD | SHATTER;
		explode Turret type NOHEATCLOUD | SHATTER;
		explode Launcher type NOHEATCLOUD | SHATTER;
		explode Flare type NOHEATCLOUD | SHATTER;
		explode PanelL type NOHEATCLOUD | SHATTER;
		explode PanelR type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode Base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Launcher type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Flare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode PanelL type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode PanelR type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode Base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Launcher type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Flare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode PanelL type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode PanelR type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
