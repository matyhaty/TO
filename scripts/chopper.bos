#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, base, blades, nosegun, t1, t2, tailgunr, aiml,
       tailgunl, aimr, pit;

static-var  Static_Var_1, Static_Var_2, gun_1, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


Go()
{
	turn body to z-axis <-45.005495> speed <75.000000>;
	move body to x-axis [-7.000000] speed [15.000000];
	move body to y-axis [3.000000] speed [15.000000];
	wait-for-move body along x-axis;
	wait-for-turn body around z-axis;
	sleep 150;
	move body to y-axis [0.000000] speed [15.000000];
	turn body to z-axis <45.005495> speed <75.000000>;
	move body to x-axis [7.000000] speed [15.000000];
	wait-for-move body along y-axis;
	move body to y-axis [3.000000] speed [15.000000];
	wait-for-move body along x-axis;
	wait-for-turn body around z-axis;
	sleep 150;
	move body to x-axis [0.000000] speed [15.000000];
	move body to y-axis [0.000000] speed [15.000000];
	turn body to z-axis <0.000000> speed <75.000000>;
	wait-for-move body along x-axis;
	wait-for-turn body around z-axis;
	sleep 3000;
}

Stop()
{
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
			}
			if( Func_Var_4 == 2 )
			{
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	Static_Var_5 = 60000;
	Static_Var_6 = 1500;
	Static_Var_7 = 1000;
	Static_Var_8 = 25000;
	Static_Var_4 = 1;
	gun_1 = base;
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	turn body to x-axis <5.000000> speed <35.000000>;
	spin blades around y-axis speed <777.000000>;
}

StopMoving()
{
	turn body to x-axis <0.000000> speed <35.000000>;
	stop-spin blades around y-axis decelerate <2.000000>;
}

RestoreAfterDelay()
{
	sleep 3000;
	turn nosegun to y-axis <0.000000> speed <55.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn nosegun to x-axis <0.000000> - pitch speed <55.000000>;
	turn nosegun to y-axis heading speed <55.000000>;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		gun_1 = blades;
		return (0);
	}
	if( gun_1 == 2 )
	{
		gun_1 = base;
		return (0);
	}
}

Shot1()
{
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 1 from t1;
	}
	if( gun_1 == 2 )
	{
		emit-sfx 1024 + 1 from t2;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = t1;
	}
	if( gun_1 == 2 )
	{
		piecenum = t2;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

FireSecondary()
{
}

QuerySecondary(piecenum)
{
	piecenum = tailgunr;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
}

QueryTertiary(piecenum)
{
	piecenum = tailgunl;
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

AimFromSecondary(piecenum)
{
	piecenum = body;
}

AimFromTertiary(piecenum)
{
	piecenum = body;
}

HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 15 )
	{
		if( Static_Var_4 == 0 )
		{
			Static_Var_4 = 1;
		}
	}
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode pit type NOHEATCLOUD;
		explode blades type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode pit type NOHEATCLOUD;
		explode blades type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode pit type NOHEATCLOUD;
		explode blades type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode pit type NOHEATCLOUD;
	explode blades type NOHEATCLOUD | SHATTER;
	return (corpsetype);
}
