#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, lnano, rnano, sonar, lights, rdoor, ldoor,
       rarm1, rarm2, larm1, larm2;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		move rdoor to z-axis [4.000000] speed [5.000000];
		move ldoor to z-axis [-4.000000] speed [5.000000];
		sleep 750;
	}
	if( TRUE )
	{
		move rarm1 to x-axis [-5.000000] speed [5.000000];
		move larm1 to x-axis [-5.000000] speed [5.000000];
		move rarm2 to x-axis [-4.000000] speed [5.000000];
		move larm2 to x-axis [-4.000000] speed [5.000000];
		sleep 1200;
	}
	sleep 80;
}

deactivatescr()
{
	if( TRUE )
	{
		move rarm1 to x-axis [0.000000] speed [5.000000];
		move larm1 to x-axis [0.000000] speed [5.000000];
		move rarm2 to x-axis [0.000000] speed [5.000000];
		move larm2 to x-axis [0.000000] speed [5.000000];
		sleep 1200;
	}
	if( TRUE )
	{
		move rdoor to z-axis [0.000000] speed [3.000000];
		move ldoor to z-axis [0.000000] speed [3.000000];
	}
	sleep 47;
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

go()
{
	dont-cache lnano;
	dont-cache rnano;
	dont-cache larm1;
	dont-cache rarm1;
	dont-cache larm2;
	dont-cache rarm2;
	dont-cache rdoor;
	dont-cache ldoor;
	dont-cache lights;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache rnano;
	cache lnano;
	cache larm1;
	cache rarm1;
	cache larm2;
	cache rarm2;
	cache rdoor;
	cache ldoor;
	cache lights;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade rdoor;
	dont-shade ldoor;
	dont-shade body;
	dont-shade lights;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin sonar around y-axis speed <50.010989>;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = rnano;
	}
	if( spray != 0 )
	{
		piecenum = lnano;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = body;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode rnano type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode rdoor type NOHEATCLOUD;
	explode ldoor type NOHEATCLOUD;
	return (corpsetype);
}
