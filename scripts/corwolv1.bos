#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, treads, arms, weight, sleeve, sk_barrel, barrel, end,
       emit, flare, turret;

static-var  restore_delay;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

Create()
{
	hide flare;
	dont-cache flare;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn sleeve to y-axis <0.000000> speed <70.000000>;
	turn sleeve to x-axis <0.000000> speed <60.000000>;
	wait-for-turn arms around y-axis;
	wait-for-turn sleeve around y-axis;
	wait-for-turn sleeve around x-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <110.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from flare;
	move barrel to z-axis [-4.000000] speed [500.000000];
	move sk_barrel to z-axis [-3.000000] speed [200.000000];
	turn arms to y-axis <-50.005495> speed <500.000000>;
	turn sleeve to y-axis <50.005495> speed <500.000000>;
	sleep 100;
	move barrel to z-axis [0.000000] speed [2.000000];
	move sk_barrel to z-axis [0.000000] speed [3.000000];
	turn arms to y-axis <0.000000> speed <23.000000>;
	turn sleeve to y-axis <0.000000> speed <23.000000>;
}

QueryPrimary(piecenum)
{
	piecenum = emit;
}

AimFromPrimary(piecenum)
{
	piecenum = arms;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode treads type NOHEATCLOUD;
		explode arms type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode sk_barrel type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode barrel type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode treads type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode arms type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | SHATTER | SMOKE | EXPLODE_ON_HIT;
		explode sk_barrel type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode barrel type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode treads type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode arms type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sk_barrel type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode treads type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arms type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sk_barrel type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
