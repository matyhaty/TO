#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, guna1, guna2, guna3, guna4, gunb1, gunb2,
       gunb3, gunb4, beam1, beam2, beam3, beam4, beam5, beam6,
       beam7, beam8, nano, guna, gunb, lights;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging, Static_Var_5;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	move base to y-axis [24.000000] speed [15.000000];
	wait-for-move base along y-axis;
	dont-cache guna1;
	dont-cache gunb1;
	turn guna1 to z-axis <-90.000000> speed <90.000000>;
	turn gunb1 to z-axis <90.000000> speed <90.000000>;
	sleep 200;
	dont-cache guna2;
	dont-cache gunb2;
	turn guna2 to z-axis <-90.000000> speed <90.000000>;
	turn gunb2 to z-axis <90.000000> speed <90.000000>;
	sleep 200;
	dont-cache guna3;
	dont-cache gunb3;
	turn guna3 to z-axis <-90.000000> speed <90.000000>;
	turn gunb3 to z-axis <90.000000> speed <90.000000>;
	sleep 200;
	dont-cache guna4;
	dont-cache gunb4;
	turn guna4 to z-axis <-90.000000> speed <90.000000>;
	turn gunb4 to z-axis <90.000000> speed <90.000000>;
	sleep 1;
	wait-for-turn guna4 around z-axis;
	cache guna1;
	cache gunb1;
	cache guna2;
	cache gunb2;
	cache guna3;
	cache gunb3;
	cache guna4;
	cache gunb4;
	sleep 200;
}

deactivatescr()
{
	dont-cache guna1;
	dont-cache gunb1;
	turn guna1 to z-axis <0.000000> speed <45.000000>;
	turn gunb1 to z-axis <0.000000> speed <45.000000>;
	sleep 400;
	dont-cache guna2;
	dont-cache gunb2;
	turn guna2 to z-axis <0.000000> speed <45.000000>;
	turn gunb2 to z-axis <0.000000> speed <45.000000>;
	sleep 400;
	dont-cache guna3;
	dont-cache gunb3;
	turn guna3 to z-axis <0.000000> speed <45.000000>;
	turn gunb3 to z-axis <0.000000> speed <45.000000>;
	sleep 400;
	dont-cache guna4;
	dont-cache gunb4;
	turn guna4 to z-axis <0.000000> speed <45.000000>;
	turn gunb4 to z-axis <0.000000> speed <45.000000>;
	sleep 1;
	wait-for-turn guna4 around z-axis;
	cache guna1;
	cache gunb1;
	cache guna2;
	cache gunb2;
	cache guna3;
	cache gunb3;
	cache guna4;
	cache gunb4;
	move base to y-axis [0.000000] speed [15.000000];
	wait-for-move base along y-axis;
	sleep 400;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 3;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 3;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	sleep 10000;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 1;
	dont-shade guna1;
	dont-shade guna2;
	dont-shade guna3;
	dont-shade guna4;
	dont-shade gunb1;
	dont-shade gunb2;
	dont-shade gunb3;
	dont-shade gunb4;
	dont-shade body;
	dont-shade lights;
	dont-cache lights;
	Static_Var_5 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = beam2;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = beam3;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = beam4;
	}
	if( Static_Var_1 == 5 )
	{
		piecenum = beam5;
	}
	if( Static_Var_1 == 6 )
	{
		piecenum = beam6;
	}
	if( Static_Var_1 == 7 )
	{
		piecenum = beam7;
	}
	if( Static_Var_1 == 8 )
	{
		piecenum = beam8;
	}
	++Static_Var_1;
	if( Static_Var_1 == 9 )
	{
		Static_Var_1 = 1;
	}
}

Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
}

Deactivate()
{
	Static_Var_5 = 0;
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = nano;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode guna type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode guna3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode guna4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode gunb4 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode guna1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode guna2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode beam1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam5 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam6 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam7 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam8 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode guna type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode guna3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode guna4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode gunb4 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode guna1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode guna2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode beam1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam5 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam6 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam7 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam8 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode guna type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode guna3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode guna4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gunb3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode gunb4 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode guna1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode guna2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode beam1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam5 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam6 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam7 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode beam8 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	explode guna type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode gunb type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode gunb1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode gunb2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode guna3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode guna4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode gunb3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode gunb4 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode guna1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode guna2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode beam1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode beam2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode beam3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode beam4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode beam5 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode beam6 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode beam7 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode beam8 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
