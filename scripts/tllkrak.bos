#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fan1, fan2, fan3, fan4, turret, sleeve, barrel1,
       flare1, barrel2, flare2, wake01, wake02, wake03, wake04, wake05,
       wake06, wake07, wake08, wake09, wake10, wake11, wake12, wake13,
       wake14, wake15, wake16, wake17, wake18, wake19, wake20;

static-var  Static_Var_1, restore_delay, gun_1, Static_Var_4, Static_Var_5,
            statechg_DesiredState, statechg_StateChanging, Static_Var_8;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

SpinSlow()
{
	stop-spin fan1 around y-axis decelerate <4.000000>;
	stop-spin fan2 around y-axis decelerate <4.000000>;
	stop-spin fan3 around y-axis decelerate <4.000000>;
	stop-spin fan4 around y-axis decelerate <4.000000>;
}

SpinFast()
{
	spin fan1 around y-axis speed <600.137363> accelerate <50.005495>;
	spin fan2 around y-axis speed <600.137363> accelerate <50.005495>;
	spin fan3 around y-axis speed <600.137363> accelerate <50.005495>;
	spin fan4 around y-axis speed <600.137363> accelerate <50.005495>;
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script SpinFast();
		Static_Var_4 = 1;
		sleep 750;
		Static_Var_5 = 1;
		set ARMORED to 0;
		emit-sfx 1024 + 1 from turret;
		move base to y-axis [2.000000] speed [24.000000];
		wait-for-move base along y-axis;
		move base to y-axis [0.000000] speed [8.000000];
		wait-for-move base along y-axis;
		move base to y-axis [1.000000] speed [8.000000];
		sleep 150;
		move base to y-axis [0.000000] speed [8.000000];
		sleep 150;
		Static_Var_4 = 0;
		Static_Var_5 = 0;
		turn base to x-axis <0.000000> speed <8.000000>;
		turn base to z-axis <0.000000> speed <8.000000>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
	}
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script SpinSlow();
	sleep 1000;
	Static_Var_4 = 1;
	Static_Var_5 = 1;
	move base to y-axis [-12.000000] speed [8.000000];
	wait-for-move base along y-axis;
	move base to y-axis [-16.000000] speed [4.000000];
	wait-for-move base along y-axis;
	Static_Var_5 = 0;
	Static_Var_4 = 0;
	turn base to x-axis <0.000000> speed <8.000000>;
	turn base to z-axis <0.000000> speed <8.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	set ARMORED to 1;
}

Tangue(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 238 )
		{
			Func_Var_3 = 263 - get ABS(Func_Var_2);
			turn base to x-axis Func_Var_2 speed Func_Var_3 * <0.027473>;
			turn base to z-axis Func_Var_2 speed Func_Var_3 * <0.027473>;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

Dive()
{
	Static_Var_8 = !Static_Var_8;
	if( Static_Var_8 == 1 )
	{
		call-script Go();
	}
	if( Static_Var_8 == 0 )
	{
		call-script Stop();
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Sway()
{
	while( TRUE )
	{
		if( Static_Var_5 )
		{
			turn base to x-axis <8.000000> speed <40.000000>;
			turn base to z-axis <8.000000> speed <40.000000>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <-8.000000> speed <32.000000>;
			turn base to z-axis <-8.000000> speed <32.000000>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <4.000000> speed <24.000000>;
			turn base to z-axis <4.000000> speed <24.000000>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <0.000000> speed <16.000000>;
			turn base to z-axis <0.000000> speed <16.000000>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
		}
		sleep 50;
	}
}

ShowBubbles()
{
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			emit-sfx 5 from wake01;
			emit-sfx 5 from wake02;
			emit-sfx 5 from wake03;
			emit-sfx 5 from wake04;
			emit-sfx 5 from wake05;
			emit-sfx 5 from wake06;
			emit-sfx 5 from wake07;
			emit-sfx 5 from wake08;
			emit-sfx 5 from wake09;
			emit-sfx 5 from wake10;
			emit-sfx 5 from wake11;
			emit-sfx 5 from wake12;
			emit-sfx 5 from wake13;
			emit-sfx 5 from wake14;
			emit-sfx 5 from wake15;
			emit-sfx 5 from wake16;
			emit-sfx 5 from wake17;
			emit-sfx 5 from wake18;
			emit-sfx 5 from wake19;
			emit-sfx 5 from wake20;
		}
		sleep 250;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex * <0.016484> speed <20.000000>;
	turn base to z-axis anglez * <0.016484> speed <20.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> - anglex speed <16.000000>;
	turn base to z-axis <0.000000> - anglez speed <16.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis anglex / <0.005495> speed <16.000000>;
	turn base to z-axis anglez / <0.005495> speed <16.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> speed <8.000000>;
	turn base to z-axis <0.000000> speed <8.000000>;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn sleeve to x-axis <0.000000> speed <25.000000>;
	start-script RequestState(1);
}

Create()
{
	hide flare1;
	hide flare2;
	hide wake01;
	hide wake02;
	hide wake03;
	hide wake04;
	hide wake05;
	hide wake06;
	hide wake07;
	hide wake08;
	hide wake09;
	hide wake10;
	hide wake11;
	hide wake12;
	hide wake13;
	hide wake14;
	hide wake15;
	hide wake16;
	hide wake17;
	hide wake18;
	hide wake19;
	hide wake20;
	dont-cache base;
	dont-cache fan1;
	dont-cache fan2;
	dont-cache fan3;
	dont-cache fan4;
	dont-cache turret;
	dont-cache sleeve;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache wake01;
	dont-cache wake02;
	dont-cache wake03;
	dont-cache wake04;
	dont-cache wake05;
	dont-cache wake06;
	dont-cache wake07;
	dont-cache wake08;
	dont-cache wake09;
	dont-cache wake10;
	dont-cache wake11;
	dont-cache wake12;
	dont-cache wake13;
	dont-cache wake14;
	dont-cache wake15;
	dont-cache wake16;
	dont-cache wake17;
	dont-cache wake18;
	dont-cache wake19;
	dont-cache wake20;
	dont-shade base;
	dont-shade fan1;
	dont-shade fan2;
	dont-shade fan3;
	dont-shade fan4;
	dont-shade turret;
	dont-shade sleeve;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade wake01;
	dont-shade wake02;
	dont-shade wake03;
	dont-shade wake04;
	dont-shade wake05;
	dont-shade wake06;
	dont-shade wake07;
	dont-shade wake08;
	dont-shade wake09;
	dont-shade wake10;
	dont-shade wake11;
	dont-shade wake12;
	dont-shade wake13;
	dont-shade wake14;
	dont-shade wake15;
	dont-shade wake16;
	dont-shade wake17;
	dont-shade wake18;
	dont-shade wake19;
	dont-shade wake20;
	restore_delay = 3000;
	Static_Var_1 = 1;
	gun_1 = base;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_8 = 1;
	call-script InitState();
	start-script SmokeUnit();
	start-script ShowBubbles();
	start-script Sway();
	start-script RequestState(0);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script Tangue();
	spin fan1 around y-axis speed <600.137363>;
	spin fan2 around y-axis speed <600.137363>;
	spin fan3 around y-axis speed <600.137363>;
	spin fan4 around y-axis speed <600.137363>;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <100.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-4.000000] now;
		emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-4.000000] now;
		emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [0.000000] speed [3.000000];
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = base;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode fan1 type NOHEATCLOUD;
		explode fan2 type NOHEATCLOUD;
		explode fan3 type NOHEATCLOUD;
		explode fan4 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode fan1 type NOHEATCLOUD | FALL;
		explode fan2 type NOHEATCLOUD | FALL;
		explode fan3 type NOHEATCLOUD | FALL;
		explode fan4 type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode fan1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode fan2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode fan3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode fan4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD | SHATTER;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode fan1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode fan2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode fan3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode fan4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD;
	explode sleeve type NOHEATCLOUD | SHATTER;
	explode barrel1 type NOHEATCLOUD;
	explode barrel2 type NOHEATCLOUD;
	return (corpsetype);
}
