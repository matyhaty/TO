#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, door1, door2, beam, arms, nano, pivot,
       wake1, wake2;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <179.000000> speed <100.000000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <-179.000000> speed <100.000000>;
		sleep 1000;
	}
	if( TRUE )
	{
		move pivot to z-axis [-1.500000] speed [1.500000];
		turn arms to x-axis <90.000000> speed <95.000000>;
		turn beam to x-axis <-90.000000> speed <95.000000>;
		sleep 700;
	}
	sleep 16;
}

deactivatescr()
{
	if( TRUE )
	{
		turn arms to x-axis <0.000000> speed <45.000000>;
		turn beam to x-axis <0.000000> speed <45.000000>;
		move pivot to z-axis [0.000000] speed [1.000000];
		sleep 960;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <100.000000>;
		turn door2 to z-axis <0.000000> speed <100.000000>;
	}
	sleep 12;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Go()
{
	call-script activatescr();
	sleep 500;
	turn pivot to y-axis Static_Var_1 speed <190.000000>;
	wait-for-turn pivot around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	sleep 500;
	turn pivot to y-axis <0.000000> speed <100.000000>;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide wake1;
	hide wake2;
	Static_Var_1 = 0;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = nano;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode beam type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode arms type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD | FALL;
		explode beam type NOHEATCLOUD | FALL;
		explode arms type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode beam type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode arms type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode beam type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode wake1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode arms type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
