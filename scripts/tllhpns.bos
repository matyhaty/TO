#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, pad, light, arm1, arm2, nano1, nano2,
       spray1, spray2, spray3;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from pad;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Tangue(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 238 )
		{
			Func_Var_3 = 263 - get ABS(Func_Var_2);
			turn base to x-axis Func_Var_2 speed Func_Var_3 * <0.027473>;
			turn base to z-axis Func_Var_2 speed Func_Var_3 * <0.027473>;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

activatescr()
{
	dont-cache arm1;
	dont-cache arm2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache light;
	move base to y-axis [2.000000] speed [3.000000];
	wait-for-move base along y-axis;
	turn arm1 to z-axis <-110.000000> speed <30.000000>;
	turn arm2 to z-axis <110.000000> speed <30.000000>;
	turn nano1 to z-axis <130.000000> speed <37.000000>;
	turn nano2 to z-axis <-130.000000> speed <37.000000>;
	wait-for-turn nano1 around z-axis;
}

deactivatescr()
{
	turn nano1 to z-axis <0.000000> speed <50.000000>;
	turn nano2 to z-axis <0.000000> speed <50.000000>;
	turn arm1 to z-axis <0.000000> speed <40.000000>;
	turn arm2 to z-axis <0.000000> speed <40.000000>;
	wait-for-turn arm1 around z-axis;
	move base to y-axis [-0.500000] speed [3.000000];
	wait-for-move base along y-axis;
	cache arm1;
	cache arm2;
	cache nano1;
	cache nano2;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade pad;
	dont-shade body;
	dont-shade light;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade arm1;
	dont-shade arm2;
	move base to y-axis [-0.500000] now;
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script Tangue();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_2 == 0 )
	{
		piecenum = spray1;
	}
	if( Static_Var_2 == 1 )
	{
		piecenum = spray2;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = spray3;
	}
	++Static_Var_2;
	if( Static_Var_2 >= 3 )
	{
		Static_Var_2 = 0;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.000000> accelerate <2.000000>;
	dont-cache pad;
}

StopBuilding()
{
	stop-spin pad around y-axis decelerate <2.000000>;
	cache pad;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	explode arm1 type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	explode pad type NOHEATCLOUD;
	explode nano1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode nano2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm2 type NOHEATCLOUD | FALL;
		explode nano2 type NOHEATCLOUD | FALL;
		explode nano1 type NOHEATCLOUD | FALL;
		explode light type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode nano2 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode nano1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode pad type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode light type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode arm2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
