#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, base, lid1, lid2, lid3, lid4, bubble1, bubble2,
       bubble3, bubble4, bubble5, housing, dome, building, pipe1, pipe2,
       pipe3, stack1, stack2, bubble6, bubble7;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		emit-sfx 259 from bubble3;
		turn lid2 to x-axis <0.593407> now;
		turn lid2 to x-axis <30.005495> speed <19.000000>;
		turn lid3 to x-axis <0.593407> now;
		turn lid3 to x-axis <-26.005495> speed <17.000000>;
		sleep 772;
		emit-sfx 259 from bubble2;
		emit-sfx 259 from bubble4;
		sleep 772;
	}
	if( TRUE )
	{
		emit-sfx 259 from bubble1;
		emit-sfx 259 from bubble5;
		turn lid1 to x-axis <35.005495> speed <22.000000>;
		turn lid4 to x-axis <-30.005495> speed <19.000000>;
		turn lid2 to x-axis <60.005495> speed <19.000000>;
		turn lid3 to x-axis <-74.016484> speed <30.000000>;
		sleep 574;
	}
	if( TRUE )
	{
		turn dome to x-axis <0.000000> now;
		turn dome to x-axis <180.038462> speed <112.000000>;
	}
	sleep 774;
}

deactivatescr()
{
	if( TRUE )
	{
		turn dome to x-axis <180.280220> now;
		turn dome to x-axis <0.000000> speed <112.000000>;
		sleep 387;
	}
	if( TRUE )
	{
		turn lid1 to x-axis <35.258242> now;
		turn lid4 to x-axis <-30.401099> now;
		turn lid2 to x-axis <60.813187> now;
		turn lid3 to x-axis <-74.192308> now;
		sleep 683;
	}
	if( TRUE )
	{
		turn lid1 to x-axis <0.000000> speed <25.000000>;
		turn lid4 to x-axis <0.000000> speed <22.000000>;
		turn lid2 to x-axis <30.005495> speed <22.000000>;
		turn lid3 to x-axis <-26.005495> speed <34.000000>;
		sleep 1374;
	}
	if( TRUE )
	{
		turn lid2 to x-axis <0.000000> speed <21.000000>;
		turn lid3 to x-axis <0.000000> speed <20.000000>;
		sleep 684;
	}
	sleep 688;
}

BubbleStacks()
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		emit-sfx 259 from bubble6;
		emit-sfx 259 from bubble7;
		sleep 1000;
	}
}

Go()
{
	dont-cache lid1;
	dont-cache lid2;
	dont-cache lid3;
	dont-cache lid4;
	call-script activatescr();
	dont-cache dome;
	start-script BubbleStacks();
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	signal 4;
	call-script deactivatescr();
	cache dome;
	cache lid1;
	cache lid2;
	cache lid3;
	cache lid4;
}

MMStatus(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}

ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	Static_Var_4 = -1;
	while( TRUE )
	{
		if( Static_Var_3 == 1 )
		{
			if( Static_Var_4 != 1 )
			{
				call-script Go();
				Static_Var_4 = 1;
			}
		}
		else if( Static_Var_4 != 0 )
		{
			call-script Stop();
			Static_Var_4 = 0;
		}
		sleep 1000;
	}
}

Create()
{
	dont-shade lid1;
	dont-shade lid2;
	dont-shade lid3;
	dont-shade lid4;
	dont-shade dome;
	Static_Var_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	set ARMORED to 1;
	start-script ImAMetalMaker();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode lid1 type NOHEATCLOUD;
		explode lid2 type NOHEATCLOUD;
		explode lid3 type NOHEATCLOUD;
		explode lid4 type NOHEATCLOUD;
		explode housing type NOHEATCLOUD;
		explode dome type NOHEATCLOUD;
		explode building type NOHEATCLOUD;
		explode stack1 type NOHEATCLOUD;
		explode stack2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode lid1 type NOHEATCLOUD | FALL;
		explode lid2 type NOHEATCLOUD | FALL;
		explode lid3 type NOHEATCLOUD | FALL;
		explode lid4 type NOHEATCLOUD | FALL;
		explode housing type NOHEATCLOUD;
		explode dome type NOHEATCLOUD;
		explode building type NOHEATCLOUD;
		explode stack1 type NOHEATCLOUD;
		explode stack2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode lid1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lid2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lid3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lid4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode housing type NOHEATCLOUD;
		explode dome type NOHEATCLOUD;
		explode building type NOHEATCLOUD;
		explode stack1 type NOHEATCLOUD;
		explode stack2 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode lid1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lid2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lid3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lid4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode housing type NOHEATCLOUD;
	explode dome type NOHEATCLOUD;
	explode building type NOHEATCLOUD;
	explode stack1 type NOHEATCLOUD;
	explode stack2 type NOHEATCLOUD;
	return (corpsetype);
}
