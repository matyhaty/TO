#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, p1, nano, spray, door, wheels1, wheels2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	if( TRUE )
	{
		turn door to x-axis <-90.000000> speed <180.000000>;
		sleep 500;
	}
	if( TRUE )
	{
		move p1 to y-axis [3.000000] speed [7.000000];
		turn nano to y-axis <0.000000> speed <120.000000>;
		sleep 100;
	}
	sleep 100;
}

deactivatescr()
{
	if( TRUE )
	{
		turn nano to y-axis <90.000000> speed <150.000000>;
		sleep 500;
		move p1 to y-axis [0.000000] speed [10.000000];
	}
	if( TRUE )
	{
		turn door to x-axis <0.000000> speed <180.000000>;
	}
	sleep 10;
}

Create()
{
	Static_Var_1 = 0;
	start-script SmokeUnit();
}

StartMoving()
{
	spin wheels1 around x-axis speed <150.000000>;
	spin wheels2 around x-axis speed <150.000000>;
	sleep 300;
	spin wheels1 around x-axis speed <250.000000>;
	spin wheels2 around x-axis speed <250.000000>;
}

StopMoving()
{
	stop-spin wheels1 around x-axis;
	stop-spin wheels2 around x-axis;
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	signal 4;
	call-script activatescr();
	turn nano to y-axis Func_Var_1 speed <160.000000>;
	wait-for-turn nano around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 6000;
	call-script deactivatescr();
	set-signal-mask 0;
	signal 4;
	set INBUILDSTANCE to 0;
	turn nano to y-axis <0.000000> speed <160.000000>;
	wait-for-turn nano around y-axis;
}

QueryNanoPiece(piecenum)
{
	piecenum = spray;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

QueryWeapon1(piecenum)
{
	piecenum = base;
}

AimFromWeapon1(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	explode door type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	explode p1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode nano type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode body type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode door type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode p1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode nano type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	corpsetype = 3;
	return (corpsetype);
}
