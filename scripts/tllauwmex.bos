#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rotor, wake1, wake2, wake3, wake4, body, top,
       door1, door2, door3, door4, plaque;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		turn top to y-axis <45.000000> speed <50.000000>;
		move top to y-axis [4.000000] speed [5.000000];
		sleep 1100;
	}
	if( TRUE )
	{
		turn door1 to z-axis <75.000000> speed <30.000000>;
		turn door2 to z-axis <-75.000000> speed <30.000000>;
		turn door3 to x-axis <-75.000000> speed <30.000000>;
		turn door4 to x-axis <75.000000> speed <30.000000>;
	}
	sleep 80;
}

deactivatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <40.000000>;
		turn door2 to z-axis <0.000000> speed <40.000000>;
		turn door3 to x-axis <0.000000> speed <40.000000>;
		turn door4 to x-axis <0.000000> speed <40.000000>;
		sleep 2000;
	}
	if( TRUE )
	{
		turn top to y-axis <0.000000> speed <50.000000>;
		move top to y-axis [0.000000] speed [5.000000];
	}
	sleep 47;
}

Go()
{
	dont-cache rotor;
	dont-cache top;
	call-script activatescr();
	sleep 1000;
	spin rotor around y-axis speed Static_Var_1 accelerate Static_Var_2;
}

Stop()
{
	call-script deactivatescr();
	sleep 1000;
	cache top;
	stop-spin rotor around y-axis decelerate Static_Var_3;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	turn body to y-axis <45.000000> now;
	Static_Var_1 = 0;
	Static_Var_2 = 91;
	Static_Var_3 = 182;
	dont-shade rotor;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		emit-sfx 256 | 3 from wake3;
		emit-sfx 256 | 3 from wake4;
		sleep 250;
	}
}

Deactivate()
{
	start-script RequestState(1);
	signal SIG_ACTIVATE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 45;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode rotor type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode door4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rotor type NOHEATCLOUD | SHATTER;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL | SMOKE;
		explode door2 type NOHEATCLOUD | FALL | SMOKE;
		explode door4 type NOHEATCLOUD | FALL | SMOKE;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode rotor type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL | SMOKE;
		explode door2 type NOHEATCLOUD | FALL | SMOKE;
		explode door4 type NOHEATCLOUD | FALL | SMOKE;
		return (corpsetype);
	}
	corpsetype = 3;
	explode rotor type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL | SMOKE;
	explode door2 type NOHEATCLOUD | FALL | SMOKE;
	explode door4 type NOHEATCLOUD | FALL | SMOKE;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
