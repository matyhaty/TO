#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, ldoor1, ldoor2, rdoor1, rdoor2, wake1, wake2,
       missile1, missile2, flare1, flare2, fakeaimpoint;

static-var  gun_1;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 3;
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from ldoor1;
				emit-sfx smoketype from ldoor1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from ldoor2;
				emit-sfx smoketype from ldoor2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = base;
	move fakeaimpoint to y-axis [150.000000] now;
	move missile1 to y-axis [-8.400000] now;
	move missile2 to y-axis [-8.400000] now;
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep 20000;
	move body to y-axis [0.000000] speed [3.000000];
	set ARMORED to 0;
	move missile1 to y-axis [-8.400000] speed [5.000000];
	move missile2 to y-axis [-8.400000] speed [5.000000];
	wait-for-move missile1 along y-axis;
	wait-for-move missile2 along y-axis;
	turn ldoor1 to z-axis <0.000000> speed <50.000000>;
	turn rdoor1 to z-axis <0.000000> speed <50.000000>;
	turn ldoor2 to z-axis <0.000000> speed <50.000000>;
	turn rdoor2 to z-axis <0.000000> speed <50.000000>;
	emit-sfx 256 | 3 from ldoor1;
	emit-sfx 256 | 3 from rdoor1;
	emit-sfx 256 | 3 from ldoor2;
	emit-sfx 256 | 3 from rdoor2;
	wait-for-turn ldoor1 around z-axis;
	wait-for-turn ldoor2 around z-axis;
	emit-sfx 256 | 3 from ldoor1;
	emit-sfx 256 | 3 from rdoor1;
	emit-sfx 256 | 3 from ldoor2;
	emit-sfx 256 | 3 from rdoor2;
}

AimPrimary()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move body to y-axis [6.000000] speed [3.000000];
	set ARMORED to 1;
	turn ldoor1 to z-axis <90.000000> speed <50.000000>;
	turn rdoor1 to z-axis <-90.000000> speed <50.000000>;
	turn ldoor2 to z-axis <90.000000> speed <50.000000>;
	turn rdoor2 to z-axis <-90.000000> speed <50.000000>;
	emit-sfx 256 | 3 from ldoor2;
	emit-sfx 256 | 3 from rdoor2;
	emit-sfx 256 | 3 from ldoor1;
	emit-sfx 256 | 3 from rdoor1;
	wait-for-turn ldoor2 around z-axis;
	emit-sfx 256 | 3 from ldoor2;
	emit-sfx 256 | 3 from rdoor2;
	emit-sfx 256 | 3 from ldoor1;
	emit-sfx 256 | 3 from rdoor1;
	move missile1 to y-axis [0.000000] speed [5.000000];
	move missile2 to y-axis [0.000000] speed [5.000000];
	wait-for-move missile1 along y-axis;
	move fakeaimpoint to y-axis [0.000000] speed [0.122070];
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = !gun_1;
	sleep 150;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = fakeaimpoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	explode missile1 type NOHEATCLOUD;
	explode missile2 type NOHEATCLOUD;
	explode wake1 type NOHEATCLOUD;
	explode wake2 type NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode ldoor1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode rdoor1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode ldoor2 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode rdoor2 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	corpsetype = 3;
	return (corpsetype);
}
