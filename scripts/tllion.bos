#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, fusee, antenne, door1, door2, door3, door4,
       silo;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Activatescr()
{
	if( TRUE )
	{
		move door1 to y-axis [0.000000] now;
		move door1 to y-axis [-3.000000] speed [1.000000];
		move door2 to y-axis [0.000000] now;
		move door2 to y-axis [-3.000000] speed [1.000000];
		move door3 to y-axis [0.000000] now;
		move door3 to y-axis [-3.000000] speed [1.000000];
		move door4 to y-axis [0.000000] now;
		move door4 to y-axis [-3.000000] speed [1.000000];
		turn door1 to x-axis <90.016484> now;
		turn door1 to x-axis <0.000000> speed <5.000000>;
		turn door2 to z-axis <-90.016484> now;
		turn door2 to z-axis <0.000000> speed <5.000000>;
		turn door3 to x-axis <-90.016484> now;
		turn door3 to x-axis <0.000000> speed <5.000000>;
		turn door4 to z-axis <90.016484> now;
		turn door4 to z-axis <0.000000> speed <5.000000>;
		sleep 15000;
		gun_1 = body;
	}
	sleep 25;
}

Deactivatescr()
{
	if( TRUE )
	{
		gun_1 = base;
		move door1 to y-axis [0.000000] now;
		move door1 to y-axis [0.000000] speed [0.000000];
		move door2 to y-axis [0.000000] now;
		move door2 to y-axis [0.000000] speed [0.000000];
		move door3 to y-axis [0.000000] now;
		move door3 to y-axis [0.000000] speed [0.000000];
		move door4 to y-axis [0.000000] now;
		move door4 to y-axis [0.000000] speed [0.000000];
		turn door1 to x-axis <90.016484> speed <25.000000>;
		turn door2 to z-axis <-90.016484> speed <25.000000>;
		turn door3 to x-axis <-90.016484> speed <25.000000>;
		turn door4 to z-axis <90.016484> speed <25.000000>;
		sleep 300;
	}
	sleep 15;
}

Go()
{
	show fusee;
	call-script Activatescr();
}

Stop()
{
	sleep 4000;
	call-script Deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide fusee;
	call-script Deactivatescr();
	gun_1 = base;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	spin antenne around y-axis speed <50.000000>;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( gun_1 == 0 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from silo;
	sleep 2000;
	hide fusee;
	gun_1 = base;
	start-script RequestState(1);
}

AimFromPrimary(piecenum)
{
	piecenum = antenne;
}

QueryPrimary(piecenum)
{
	piecenum = fusee;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode antenne type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | SHATTER;
		explode antenne type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode antenne type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
