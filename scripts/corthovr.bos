#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arm, tower, wake1, wake2, wake3, wake4, wake5,
       wake6, wake7, wake8, rdoor, ldoor, boom1, boom2, boom3,
       boom4, magnet, link, boom5, boom6;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_MOVE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = 4;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	turn rdoor to z-axis <-90.000000> speed <100.000000>;
	turn ldoor to z-axis <90.000000> speed <100.000000>;
	wait-for-turn rdoor around z-axis;
	wait-for-turn ldoor around z-axis;
	move rdoor to y-axis [-9.000000] speed [25.000000];
	move ldoor to y-axis [-9.000000] speed [25.000000];
	wait-for-move ldoor along y-axis;
	wait-for-move ldoor along y-axis;
	sleep 5000;
	move rdoor to y-axis [0.000000] speed [25.000000];
	move ldoor to y-axis [0.000000] speed [25.000000];
	wait-for-move rdoor along y-axis;
	wait-for-move ldoor along y-axis;
	turn rdoor to z-axis <0.000000> speed <100.000000>;
	turn ldoor to z-axis <0.000000> speed <100.000000>;
	wait-for-turn rdoor around z-axis;
	wait-for-turn ldoor around z-axis;
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(tower) - posxz;
	Func_Var_4 = posy - get PIECE_Y(tower) - [20.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_2 = get HYPOT(Func_Var_5,Func_Var_4) - [20.000000];
	Static_Var_3 = get XZ_ATAN(Func_Var_3);
	Static_Var_4 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_5 = Static_Var_2 < [90.000000];
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn tower to y-axis Static_Var_3 speed <200.000000>;
	wait-for-turn tower around y-axis;
	move boom1 to z-axis Static_Var_2 / [0.000037] speed [60.000000];
	move boom2 to z-axis Static_Var_2 / [0.000037] speed [60.000000];
	move boom3 to z-axis Static_Var_2 / [0.000037] speed [60.000000];
	move boom4 to z-axis Static_Var_2 / [0.000037] speed [60.000000];
	move boom5 to z-axis Static_Var_2 / [0.000037] speed [60.000000];
	move boom6 to z-axis Static_Var_2 / [0.000037] speed [60.000000];
	wait-for-move boom1 along z-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	turn magnet to x-axis Static_Var_4 speed <80.000000>;
	turn arm to x-axis <0.000000> - Static_Var_4 speed <80.000000>;
	wait-for-turn arm around x-axis;
	wait-for-turn magnet around x-axis;
}

BoomReset()
{
	turn arm to x-axis <0.000000> speed <60.000000>;
	turn magnet to x-axis <0.000000> speed <60.000000>;
	wait-for-turn arm around x-axis;
	wait-for-turn magnet around x-axis;
	turn tower to y-axis <0.000000> speed <200.000000>;
	move boom1 to z-axis [0.000000] speed [50.000000];
	move boom2 to z-axis [0.000000] speed [50.000000];
	move boom3 to z-axis [0.000000] speed [50.000000];
	move boom4 to z-axis [0.000000] speed [50.000000];
	move boom5 to z-axis [0.000000] speed [50.000000];
	move boom6 to z-axis [0.000000] speed [50.000000];
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn magnet to x-axis <0.000000> speed <60.000000>;
	turn arm to x-axis <0.000000> speed <60.000000>;
	wait-for-turn magnet around x-axis;
	wait-for-turn arm around x-axis;
	turn tower to y-axis <0.000000> speed <200.000000>;
	move boom1 to z-axis [0.000000] speed [60.000000];
	move boom2 to z-axis [0.000000] speed [60.000000];
	move boom3 to z-axis [0.000000] speed [60.000000];
	move boom4 to z-axis [0.000000] speed [60.000000];
	move boom5 to z-axis [0.000000] speed [60.000000];
	move boom6 to z-axis [0.000000] speed [60.000000];
	wait-for-turn tower around y-axis;
	wait-for-turn arm around x-axis;
	wait-for-move boom1 along z-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
	wait-for-move boom5 along z-axis;
	wait-for-move boom6 along z-axis;
	turn magnet to x-axis <-30.000000> speed <60.000000>;
	turn arm to x-axis <30.000000> speed <60.000000>;
	wait-for-turn arm around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_5 AND get UNIT_ALLIED(unitid) == get UNIT_ALLIED(get MY_ID) )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_5 )
	{
		set BUSY to 1;
		call-script BoomToPad();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode boom1 type NOHEATCLOUD;
		explode boom2 type NOHEATCLOUD;
		explode boom3 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		explode link type NOHEATCLOUD;
		explode arm type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode boom1 type NOHEATCLOUD;
		explode boom2 type NOHEATCLOUD | SHATTER;
		explode boom3 type NOHEATCLOUD | SHATTER;
		explode base type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		explode link type NOHEATCLOUD | FALL;
		explode arm type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode boom1 type NOHEATCLOUD;
		explode boom2 type NOHEATCLOUD | SHATTER;
		explode boom3 type NOHEATCLOUD | SHATTER;
		explode base type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		explode link type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode arm type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode boom1 type NOHEATCLOUD;
	explode boom2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode boom3 type NOHEATCLOUD | SHATTER;
	explode base type NOHEATCLOUD;
	explode rdoor type NOHEATCLOUD;
	explode ldoor type NOHEATCLOUD;
	explode link type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arm type NOHEATCLOUD;
	return (corpsetype);
}
