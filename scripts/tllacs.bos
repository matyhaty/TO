#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, arm, nano, spray, door1, door2, wake1,
       wake2, bearing;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from arm;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 200;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Go()
{
	turn door1 to z-axis <-90.000000> speed <180.000000>;
	turn door2 to z-axis <90.000000> speed <180.000000>;
	sleep 500;
	turn arm to x-axis <90.000000> speed <90.000000>;
	turn nano to x-axis <-90.000000> speed <90.000000>;
	move bearing to z-axis [-4.000000] speed [4.000000];
	wait-for-turn nano around x-axis;
	turn bearing to y-axis Static_Var_1 speed <160.000000>;
	wait-for-turn bearing around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn bearing to y-axis <0.000000> speed <160.000000>;
	wait-for-turn bearing around y-axis;
	move bearing to z-axis [0.000000] speed [5.000000];
	turn arm to x-axis <0.000000> speed <90.000000>;
	turn nano to x-axis <0.000000> speed <90.000000>;
	wait-for-turn nano around x-axis;
	turn door1 to z-axis <0.000000> speed <180.000000>;
	turn door2 to z-axis <0.000000> speed <180.000000>;
	wait-for-turn door1 around z-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = spray;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	explode body type NOHEATCLOUD;
	explode arm type NOHEATCLOUD;
	explode door1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode door2 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode nano type NOHEATCLOUD | SHATTER;
	explode arm type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	explode body type NOHEATCLOUD | SHATTER;
	explode nano type NOHEATCLOUD;
	corpsetype = 3;
	return (corpsetype);
}
