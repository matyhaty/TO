#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, door1, door2, sleeve, barrel1, barrel2,
       flare1, flare2;

static-var  Static_Var_1, Static_Var_2, gun_1, statechg_DesiredState,
            statechg_StateChanging, Static_Var_7;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <90.000000> speed <110.000000>;
		turn door2 to z-axis <-90.000000> speed <110.000000>;
		sleep 750;
		move turret to y-axis [0.000000] speed [15.000000];
		sleep 1000;
		turn sleeve to x-axis <0.000000> speed <60.000000>;
	}
	sleep 10;
}

deactivatescr()
{
	if( TRUE )
	{
		turn sleeve to x-axis <-90.000000> speed <60.000000>;
		sleep 1000;
	}
	if( TRUE )
	{
		move turret to y-axis [-25.000000] speed [15.000000];
		sleep 1000;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <85.000000>;
		turn door2 to z-axis <0.000000> speed <85.000000>;
	}
	sleep 10;
}

HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_7 == 0 )
		{
			Static_Var_7 = 1;
			hide door1;
			explode door1 type NOHEATCLOUD | FALL | SMOKE;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_7 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 75 )
		{
			if( Static_Var_7 == 1 )
			{
				Static_Var_7 = 0;
				show door1;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache sleeve;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache turret;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache sleeve;
	cache barrel1;
	cache barrel2;
	cache turret;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	if( Static_Var_1 == 0 )
	{
		turn turret to y-axis <0.000000> speed <200.000000>;
	}
	if( Static_Var_1 == 1 )
	{
		turn turret to y-axis <180.000000> speed <200.000000>;
	}
	wait-for-turn turret around y-axis;
	start-script RequestState(1);
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade sleeve;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade turret;
	hide flare1;
	hide flare2;
	Static_Var_1 = 1;
	gun_1 = body;
	Static_Var_2 = 4000;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);
	turn door1 to z-axis <90.000000> now;
	turn door2 to z-axis <-90.000000> now;
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <200.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn sleeve around x-axis;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		move barrel1 to z-axis [-1.500000] speed [200.000000];
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [10.000000];
	}
	if( gun_1 == 2 )
	{
		move barrel2 to z-axis [-1.500000] speed [200.000000];
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [10.000000];
	}
	++gun_1;
	if( gun_1 >= 3 )
	{
		gun_1 = body;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel1 type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode body type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL;
		explode door2 type NOHEATCLOUD | FALL;
		explode barrel1 type NOHEATCLOUD | FALL;
		explode barrel2 type NOHEATCLOUD | FALL;
		explode sleeve type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode body type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 4;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD;
	explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
