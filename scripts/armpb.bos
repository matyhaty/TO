#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, dome, post, gun, barrel, flare;

static-var  Static_Var_1;

// Signal definitions
#define SIG_AIM				2


FClose()
{
	signal 4;
	set-signal-mask 4;
	Static_Var_1 = 0;
	turn gun to x-axis <0.000000> speed <90.000000>;
	move barrel to z-axis [-5.500000] speed [15.000000];
	move gun to x-axis [0.000000] speed [5.000000];
	wait-for-move gun along x-axis;
	wait-for-turn gun around x-axis;
	wait-for-move barrel along z-axis;
	move post to y-axis [-17.600000] speed [25.000000];
	wait-for-move post along y-axis;
	turn dome to x-axis <0.000000> speed <550.000000>;
	wait-for-turn dome around x-axis;
	set ARMORED to 1;
}

FCloseAfterDelay()
{
	set-signal-mask 4;
	sleep 4000;
	set-signal-mask 0;
	start-script FClose();
}

FOpen()
{
	signal 4;
	set-signal-mask 4;
	set ARMORED to 0;
	turn dome to x-axis <-135.027473> speed <550.000000>;
	wait-for-turn dome around x-axis;
	move post to y-axis [0.000000] speed [25.000000];
	move barrel to z-axis [0.000000] speed [15.000000];
	move gun to x-axis [1.500000] speed [5.000000];
	wait-for-move post along y-axis;
	wait-for-move barrel along z-axis;
	wait-for-move gun along x-axis;
	Static_Var_1 = 1;
	start-script FCloseAfterDelay();
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	dont-cache turret;
	dont-cache dome;
	dont-cache post;
	dont-cache gun;
	dont-cache barrel;
	dont-cache flare;
	dont-shade turret;
	dont-shade dome;
	dont-shade post;
	dont-shade gun;
	dont-shade barrel;
	dont-shade flare;
	Static_Var_1 = 1;
	start-script FCloseAfterDelay();
	start-script SmokeUnit();
	turn dome to x-axis <-135.000000> now;
	move gun to x-axis [1.500000] now;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script FOpen();
	while( !Static_Var_1 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <200.000000>;
	turn gun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode post type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode dome type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type NOHEATCLOUD | FALL;
		explode post type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode base type NOHEATCLOUD | SHATTER;
		explode dome type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD;
		explode post type NOHEATCLOUD;
		explode gun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode dome type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD;
	explode post type NOHEATCLOUD;
	explode gun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode dome type NOHEATCLOUD | SHATTER;
	explode turret type NOHEATCLOUD;
	return (corpsetype);
}
