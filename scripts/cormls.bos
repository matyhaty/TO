#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Base, Body, NanoDoor1, NanoDoor2, Boom, Neck, NanoGun, NanoSpray,
       Wake1, Wake2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;

// Signal definitions
#define SIG_MOVE			2


SetDirection(heading)
{
	var Func_Var_2;
	Func_Var_2 = ( get ABS(Static_Var_4) - get ABS(heading) ) / 2;
	turn Base to y-axis heading speed Func_Var_2;
	turn Body to y-axis <0.000000> - heading speed Func_Var_2;
	Static_Var_4 = heading;
}

RockOnWaves()
{
	while( TRUE )
	{
		turn Base to x-axis <1.000000> speed <1.500000>;
		move Base to y-axis [0.000000] speed [0.150000];
		wait-for-turn Base around x-axis;
		turn Base to x-axis <-1.000000> speed <1.500000>;
		move Base to y-axis [-0.100000] speed [0.150000];
		wait-for-move Base along y-axis;
		move Base to y-axis [0.000000] speed [0.150000];
		wait-for-turn Base around x-axis;
		turn Base to x-axis <1.000000> speed <1.500000>;
		move Base to y-axis [-0.100000] speed [0.150000];
		wait-for-move Base along y-axis;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	turn NanoDoor1 to z-axis <-90.016484> speed <95.000000>;
	turn NanoDoor2 to z-axis <90.016484> speed <95.000000>;
	sleep 200;
	turn Boom to x-axis <39.005495> speed <42.000000>;
	turn Neck to x-axis <-39.005495> speed <42.000000>;
	sleep 200;
}

deactivatescr()
{
	turn Boom to x-axis <0.000000> speed <62.000000>;
	turn Neck to x-axis <0.000000> speed <62.000000>;
	sleep 200;
	turn NanoDoor1 to z-axis <0.000000> speed <125.000000>;
	turn NanoDoor2 to z-axis <0.000000> speed <125.000000>;
	sleep 200;
}

Go()
{
	call-script activatescr();
	turn Neck to y-axis Static_Var_1 speed <160.000000>;
	wait-for-turn Neck around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn Neck to y-axis <0.000000> speed <180.000000>;
	wait-for-turn Neck around y-axis;
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

waveSplash()
{
	while( TRUE )
	{
		turn Body to x-axis <-3.000000> speed <3.000000>;
		move Body to y-axis [0.229999] speed [0.229999];
		wait-for-turn Body around x-axis;
		turn Body to x-axis <0.000000> speed <3.000000>;
		move Body to y-axis [0.000000] speed [0.229999];
		wait-for-turn Body around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from Wake1;
		emit-sfx 2 from Wake2;
		Func_Var_1 = get CURRENT_SPEED * 100 / get MAX_SPEED;
		if( Func_Var_1 < 50 )
		{
			Func_Var_1 = 50;
		}
		sleep 15000 / Func_Var_1;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

QueryNanoPiece(piecenum)
{
	piecenum = NanoSpray;
	turn Body to x-axis <0.000000> speed <3.000000>;
	move Body to y-axis [0.000000] speed [0.229999];
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = Base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Base type NOHEATCLOUD;
		explode Body type NOHEATCLOUD;
		explode NanoDoor1 type NOHEATCLOUD;
		explode NanoDoor2 type NOHEATCLOUD;
		explode Boom type NOHEATCLOUD;
		explode Neck type NOHEATCLOUD;
		explode NanoGun type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Base type NOHEATCLOUD;
		explode Body type NOHEATCLOUD;
		explode NanoDoor1 type NOHEATCLOUD;
		explode NanoDoor2 type NOHEATCLOUD;
		explode Boom type NOHEATCLOUD;
		explode Neck type NOHEATCLOUD;
		explode NanoGun type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode Base type NOHEATCLOUD | SHATTER;
		explode Body type NOHEATCLOUD | SHATTER;
		explode NanoDoor1 type NOHEATCLOUD | SHATTER;
		explode NanoDoor2 type NOHEATCLOUD | SHATTER;
		explode Boom type NOHEATCLOUD | SHATTER;
		explode Neck type NOHEATCLOUD | SHATTER;
		explode NanoGun type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode Base type NOHEATCLOUD | SHATTER;
	explode Body type NOHEATCLOUD | SHATTER;
	explode NanoDoor1 type NOHEATCLOUD | SHATTER;
	explode NanoDoor2 type NOHEATCLOUD | SHATTER;
	explode Boom type NOHEATCLOUD | SHATTER;
	explode Neck type NOHEATCLOUD | SHATTER;
	explode NanoGun type NOHEATCLOUD | SHATTER;
	return (corpsetype);
}
