#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, stand, gun, turret;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


activatescr()
{
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <103.912088> speed <101.978022>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <-103.758242> speed <101.824176>;
	sleep 90;
	turn door1 to z-axis <206.593407> speed <308.346154>;
	turn door2 to z-axis <-207.500000> speed <311.516484>;
	sleep 40;
	move stand to y-axis [4.099994] speed [12.312305];
	move gun to y-axis [0.700000] speed [2.102100];
	sleep 40;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.038462>;
	wait-for-turn turret around y-axis;
	move stand to y-axis [4.099994] now;
	move stand to y-axis [0.000000] speed [5.710303];
	move gun to y-axis [0.700000] now;
	move gun to y-axis [0.000000] speed [0.974927];
	turn door1 to z-axis <206.593407> now;
	turn door2 to z-axis <-207.500000> now;
	sleep 40;
	turn door1 to x-axis <0.000000> speed <0.000000>;
	turn door1 to z-axis <103.912088> speed <210.412088>;
	turn door2 to z-axis <-103.758242> speed <212.571429>;
	sleep 70;
	turn door1 to x-axis <0.000000> speed <0.000000>;
	turn door1 to z-axis <0.000000> speed <212.945055>;
	turn door2 to z-axis <0.000000> speed <212.626374>;
	sleep 70;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 )
		{
			call-script deactivatescr();
			Static_Var_1 = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			Static_Var_1 = 0;
			currentstate = 0;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	while( Static_Var_1 )
	{
		sleep 100;
	}
	signal 4;
	turn turret to y-axis Func_Var_1 speed <160.038462>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 6000;
	set-signal-mask 0;
	signal 4;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode beam type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode stand type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode beam type NOHEATCLOUD | FALL;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode gun type NOHEATCLOUD | SHATTER;
		explode stand type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode beam type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode gun type NOHEATCLOUD | SHATTER;
		explode stand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode beam type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode gun type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode stand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
