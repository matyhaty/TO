#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  pelvis, torso, spines, launcher, door1, flip1, door2, flip2,
       firepoint, rflame, lflame, ruparm, rloarm, rfirept, rflame2, rtubes,
       rslide1, rslide2, rtop, luparm, lloarm, ltubes, lfirept, lslide1,
       lslide2, lflame2, ltop, head, horns, eyegun, lthigh, lleg,
       lfoot, rthigh, rleg, rfoot;

static-var  gun_1, bAiming, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, bMoving;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_3			16


lua_FlameShot(Func_Var_1)
{
}

walk()
{
	if( bMoving )
	{
		turn lleg to x-axis <15.000000> speed <110.000000>;
		turn lfoot to x-axis <-15.000000> speed <110.000000>;
		turn lthigh to x-axis <20.000000> speed <60.000000>;
		turn rthigh to x-axis <-20.000000> speed <55.000000>;
		turn rleg to x-axis <-15.000000> speed <115.000000>;
		turn rfoot to x-axis <15.000000> speed <115.000000>;
		sleep 500;
		turn rleg to x-axis <15.000000> speed <105.000000>;
		turn rfoot to x-axis <-15.000000> speed <105.000000>;
		sleep 200;
	}
	while( bMoving )
	{
		if( bMoving )
		{
			turn rthigh to x-axis <30.000000> speed <55.000000>;
			turn lthigh to x-axis <-30.000000> speed <60.000000>;
			turn lleg to x-axis <-20.000000> speed <110.000000>;
			turn lfoot to x-axis <20.000000> speed <110.000000>;
			sleep 700;
			turn lleg to x-axis <20.000000> speed <110.000000>;
			turn lfoot to x-axis <-20.000000> speed <110.000000>;
			sleep 400;
		}
		if( bMoving )
		{
			turn lthigh to x-axis <30.000000> speed <60.000000>;
			turn rthigh to x-axis <-30.000000> speed <55.000000>;
			turn rleg to x-axis <-20.000000> speed <115.000000>;
			turn rfoot to x-axis <20.000000> speed <115.000000>;
			sleep 700;
			turn rleg to x-axis <20.000000> speed <105.000000>;
			turn rfoot to x-axis <-20.000000> speed <105.000000>;
			sleep 400;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

PilotLight(Func_Var_1)
{
	while( TRUE )
	{
		while( bAiming )
		{
			sleep 100;
		}
		emit-sfx 1024 + 1 from lfirept;
		emit-sfx 1024 + 1 from rfirept;
		sleep 86;
	}
}

RestoreAfterDelay()
{
	sleep Static_Var_3;
	set-signal-mask 0;
	move lslide1 to x-axis [0.000000] now;
	move lslide2 to x-axis [0.000000] now;
	move rslide1 to x-axis [0.000000] now;
	move rslide2 to x-axis [0.000000] now;
	hide rflame2;
	hide lflame2;
	turn torso to y-axis <0.000000> speed <115.000000>;
	wait-for-turn torso around y-axis;
	bAiming = FALSE;
	sleep 12000;
	if( !bMoving AND !bAiming )
	{
		turn head to y-axis <10.000000> speed <20.000000>;
		wait-for-turn head around y-axis;
		emit-sfx 258 from head;
		turn head to y-axis <-10.000000> speed <20.000000>;
		wait-for-turn head around y-axis;
		emit-sfx 258 from head;
		turn head to y-axis <0.000000> speed <20.000000>;
		wait-for-turn head around y-axis;
		emit-sfx 258 from head;
	}
	turn head to y-axis <0.000000> speed <20.000000>;
	emit-sfx 258 from head;
	wait-for-turn head around y-axis;
	sleep 10;
}

RestoreAfterDelay1()
{
	sleep 2000;
	turn flip1 to z-axis <0.000000> speed <90.000000>;
	turn flip2 to z-axis <0.000000> speed <90.000000>;
}

Create()
{
	Static_Var_4 = get MY_ID;
	set ARMORED to 0;
	bMoving = FALSE;
	bAiming = FALSE;
	hide lslide1;
	hide lslide2;
	hide rslide1;
	hide rslide2;
	hide eyegun;
	hide lflame2;
	hide rflame2;
	hide ltubes;
	hide rtubes;
	Static_Var_8 = 200;
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	Static_Var_5 = 0;
	gun_1 = pelvis;
	Static_Var_3 = 2000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script PilotLight();
	start-script RestoreAfterDelay();
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	turn lthigh to x-axis <0.000000> speed <100.000000>;
	turn rthigh to x-axis <0.000000> speed <100.000000>;
	turn lleg to x-axis <0.000000> speed <200.000000>;
	turn rleg to x-axis <0.000000> speed <200.000000>;
	turn lthigh to z-axis <0.000000> speed <100.000000>;
	turn rthigh to z-axis <0.000000> speed <100.000000>;
	turn lleg to z-axis <0.000000> speed <200.000000>;
	turn rleg to z-axis <0.000000> speed <200.000000>;
	move pelvis to y-axis [0.000000] speed [40.000000];
	turn pelvis to z-axis <0.000000> now;
	turn rfoot to x-axis <0.000000> speed <200.000000>;
	turn lfoot to x-axis <0.000000> speed <200.000000>;
	turn rfoot to z-axis <0.000000> speed <200.000000>;
	turn lfoot to z-axis <0.000000> speed <200.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	move lslide1 to x-axis [0.350000] now;
	move lslide2 to x-axis [-0.350000] now;
	move rslide1 to x-axis [0.350000] now;
	move rslide2 to x-axis [-0.350000] now;
	turn head to y-axis <0.000000> now;
	if( Static_Var_7 != 0 )
	{
		show rflame2;
		show lflame2;
	}
	turn torso to y-axis heading speed <185.000000>;
	wait-for-turn torso around y-axis;
	while( gun_1 )
	{
		set-signal-mask 8;
		sleep Static_Var_8;
		wait-for-turn torso around y-axis;
		gun_1 = pelvis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_5 == 0 )
	{
		signal 8;
		gun_1 = torso;
	}
	if( Static_Var_5 == 1 )
	{
		signal 8;
		gun_1 = torso;
	}
	Static_Var_5 = !Static_Var_5;
}

Shot1()
{
	call-script lua_FlameShot(1);
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	if( Static_Var_5 == 0 )
	{
		piecenum = lfirept;
		return (0);
	}
	if( Static_Var_5 == 1 )
	{
		piecenum = rfirept;
		return (0);
	}
}

AimTertiary()
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn flip1 to z-axis <90.000000> speed <90.000000>;
	turn flip2 to z-axis <-90.000000> speed <90.000000>;
	wait-for-turn flip1 around z-axis;
	wait-for-turn flip2 around z-axis;
	start-script RestoreAfterDelay1();
	return (1);
}

FireTertiary()
{
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryTertiary(piecenum)
{
	piecenum = firepoint;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode head type NOHEATCLOUD;
		explode pelvis type NOHEATCLOUD;
		explode lloarm type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD;
		explode lthigh type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD;
		explode rloarm type NOHEATCLOUD;
		explode rleg type NOHEATCLOUD;
		explode rthigh type NOHEATCLOUD;
		explode ruparm type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode head type NOHEATCLOUD;
		explode pelvis type NOHEATCLOUD;
		explode lloarm type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode lleg type NOHEATCLOUD;
		explode lthigh type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD;
		explode rloarm type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode rleg type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode rthigh type NOHEATCLOUD;
		explode ruparm type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode head type NOHEATCLOUD;
		explode pelvis type NOHEATCLOUD;
		explode lloarm type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode lleg type NOHEATCLOUD;
		explode lthigh type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD;
		explode rloarm type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
		explode rleg type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
		explode rthigh type NOHEATCLOUD;
		explode ruparm type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode head type NOHEATCLOUD;
	explode pelvis type NOHEATCLOUD;
	explode lloarm type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lleg type NOHEATCLOUD;
	explode lthigh type NOHEATCLOUD;
	explode luparm type NOHEATCLOUD;
	explode rloarm type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rleg type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rthigh type NOHEATCLOUD;
	explode ruparm type NOHEATCLOUD;
	return (corpsetype);
}
