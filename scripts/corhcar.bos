#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, stall1, land1, stall2, land2, stall3, land3,
       stall4, land4, terminal1, radar1, beam1, terminal2, radar2, beam2,
       bldg1, bldg2, targ, light, silo, missile, doodad1, doodad2,
       smb, fp, wake1, wake2, wake3, wake4, wake5, wake6;

static-var  Static_Var_1, Static_Var_2, spray;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_AIM				4
#define SIG_MOVE			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
			emit-sfx smoketype from doodad1;
			emit-sfx smoketype from doodad2;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 1;
	spray = base;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
	spin radar1 around y-axis speed <60.005495>;
	spin radar2 around y-axis speed <-60.005495>;
}

Activate()
{
	dont-cache light;
	spin radar1 around y-axis speed <60.005495>;
	spin radar2 around y-axis speed <-60.005495>;
}

Deactivate()
{
	stop-spin radar1 around y-axis;
	stop-spin radar2 around y-axis;
	cache light;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		emit-sfx 2 from wake4;
		emit-sfx 2 from wake5;
		emit-sfx 2 from wake6;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	Func_Var_1 = 3;
	Func_Var_2 = 5;
	Func_Var_3 = 7;
	Func_Var_4 = 9;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = radar2;
}

QueryTertiary(piecenum)
{
	piecenum = missile;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = fp;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode radar1 type NOHEATCLOUD;
		explode doodad1 type NOHEATCLOUD;
		explode doodad2 type NOHEATCLOUD;
		explode silo type NOHEATCLOUD;
		explode terminal2 type NOHEATCLOUD;
		explode bldg1 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode radar1 type NOHEATCLOUD | SHATTER;
		explode doodad1 type NOHEATCLOUD | FALL;
		explode doodad2 type NOHEATCLOUD | FALL;
		explode silo type NOHEATCLOUD | SHATTER;
		explode terminal2 type NOHEATCLOUD | FALL;
		explode bldg1 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode radar1 type NOHEATCLOUD | SHATTER;
		explode doodad1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doodad2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode silo type NOHEATCLOUD | SHATTER;
		explode terminal2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode bldg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode radar1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode doodad1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doodad2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode silo type NOHEATCLOUD | SHATTER;
	explode terminal2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bldg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
