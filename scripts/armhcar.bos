#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, deck, bridge, terminal, larray, rarray, light,
       beam1, dome1, dome2, smb, fp, silo, case, missile,
       land1, land2, land3, land4, doodad, radar, wings, wake1,
       wake2, wake3, wake4, wake5, wake6;

static-var  Static_Var_1, Static_Var_2;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_AIM				4
#define SIG_MOVE			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
			emit-sfx smoketype from doodad;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}

Activate()
{
	dont-cache light;
	spin radar around y-axis speed <60.005495>;
}

Deactivate()
{
	stop-spin radar around y-axis;
	cache light;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		emit-sfx 2 from wake4;
		emit-sfx 2 from wake5;
		emit-sfx 2 from wake6;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	Func_Var_1 = 16;
	Func_Var_2 = 17;
	Func_Var_3 = 18;
	Func_Var_4 = 19;
}

QueryNanoPiece(piecenum)
{
	piecenum = beam1;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

QueryTertiary(piecenum)
{
	piecenum = missile;
}

AimFromTertiary(piecenum)
{
	piecenum = light;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = fp;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode radar type NOHEATCLOUD;
		explode doodad type NOHEATCLOUD;
		explode smb type NOHEATCLOUD;
		explode silo type NOHEATCLOUD;
		explode terminal type NOHEATCLOUD;
		explode case type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode radar type NOHEATCLOUD | SHATTER;
		explode doodad type NOHEATCLOUD | FALL;
		explode smb type NOHEATCLOUD | FALL;
		explode silo type NOHEATCLOUD | SHATTER;
		explode terminal type NOHEATCLOUD | FALL;
		explode case type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode radar type NOHEATCLOUD | SHATTER;
		explode doodad type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode smb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode silo type NOHEATCLOUD | SHATTER;
		explode terminal type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode case type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode radar type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode doodad type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode smb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode silo type NOHEATCLOUD | SHATTER;
	explode terminal type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode case type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
