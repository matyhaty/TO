#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, arm1, arm2, arm3, link, door1, door2,
       wake1, wake2, magnet, arm4, arm5, arm6, arm7, ground;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_MOVE			2


SetDirection(heading)
{
	var Func_Var_2;
	Func_Var_2 = ( get ABS(Static_Var_5) - get ABS(heading) ) / 2;
	turn ground to y-axis heading speed Func_Var_2;
	turn base to y-axis <0.000000> - heading speed Func_Var_2;
	Static_Var_5 = heading;
}

RockOnWaves(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 238 )
		{
			Func_Var_3 = 263 - get ABS(Func_Var_2);
			turn ground to x-axis Func_Var_2 speed Func_Var_3 * <0.016484>;
			wait-for-turn ground around x-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.000000> speed <3.000000>;
		move base to y-axis [0.350000] speed [0.250000];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <3.000000>;
		move base to y-axis [0.000000] speed [0.250000];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		Func_Var_1 = get CURRENT_SPEED * 100 / get MAX_SPEED;
		if( Func_Var_1 < 50 )
		{
			Func_Var_1 = 50;
		}
		sleep 10000 / Func_Var_1;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <3.000000>;
	move base to y-axis [0.000000] speed [0.250000];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	turn door1 to z-axis <-90.000000> speed <50.000000>;
	turn door2 to z-axis <90.000000> speed <50.000000>;
	sleep 5000;
	turn door1 to z-axis <0.000000> speed <20.000000>;
	turn door2 to z-axis <0.000000> speed <20.000000>;
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret) - posxz;
	Func_Var_4 = posy - get PIECE_Y(turret) - [20.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_1 = get HYPOT(Func_Var_5,Func_Var_4) - [20.000000];
	Static_Var_2 = get XZ_ATAN(Func_Var_3);
	Static_Var_3 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_4 = Static_Var_1 < [126.000000];
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn turret to y-axis Static_Var_2 speed <160.000000>;
	turn magnet to x-axis Static_Var_3 speed <80.000000>;
	turn arm1 to x-axis <0.000000> - Static_Var_3 speed <80.000000>;
	move arm2 to z-axis Static_Var_1 / [0.000037] speed [60.000000];
	move arm3 to z-axis Static_Var_1 / [0.000037] speed [60.000000];
	move arm4 to z-axis Static_Var_1 / [0.000037] speed [60.000000];
	move arm5 to z-axis Static_Var_1 / [0.000037] speed [60.000000];
	move arm6 to z-axis Static_Var_1 / [0.000037] speed [60.000000];
	move arm7 to z-axis Static_Var_1 / [0.000037] speed [60.000000];
	wait-for-turn turret around y-axis;
	wait-for-turn arm1 around x-axis;
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
	wait-for-move arm6 along z-axis;
	wait-for-move arm7 along z-axis;
}

BoomReset()
{
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn magnet to x-axis <0.000000> speed <60.000000>;
	turn arm1 to x-axis <0.000000> speed <60.000000>;
	move arm2 to z-axis [0.000000] speed [50.000000];
	move arm3 to z-axis [0.000000] speed [50.000000];
	move arm4 to z-axis [0.000000] speed [50.000000];
	move arm5 to z-axis [0.000000] speed [50.000000];
	move arm6 to z-axis [0.000000] speed [50.000000];
	move arm7 to z-axis [0.000000] speed [50.000000];
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn magnet to x-axis <0.000000> speed <60.000000>;
	turn arm1 to x-axis <0.000000> speed <60.000000>;
	move arm2 to z-axis [0.000000] speed [60.000000];
	move arm3 to z-axis [0.000000] speed [60.000000];
	move arm4 to z-axis [0.000000] speed [60.000000];
	move arm5 to z-axis [0.000000] speed [60.000000];
	move arm6 to z-axis [0.000000] speed [60.000000];
	move arm7 to z-axis [0.000000] speed [60.000000];
	wait-for-turn turret around y-axis;
	wait-for-turn arm1 around x-axis;
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
	wait-for-move arm6 along z-axis;
	wait-for-move arm7 along z-axis;
	turn magnet to x-axis <-30.000000> speed <60.000000>;
	turn arm1 to x-axis <30.000000> speed <60.000000>;
	wait-for-turn arm1 around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 AND get UNIT_ALLIED(unitid) == get UNIT_ALLIED(get MY_ID) )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 )
	{
		set BUSY to 1;
		call-script BoomToPad();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD;
		explode arm3 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode link type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD;
		explode wake2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD | SHATTER;
		explode arm3 type NOHEATCLOUD | SHATTER;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode link type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD | FALL;
		explode wake2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD | SHATTER;
		explode arm3 type NOHEATCLOUD | SHATTER;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode link type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wake2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arm1 type NOHEATCLOUD;
	explode arm2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode arm3 type NOHEATCLOUD | SHATTER;
	explode base type NOHEATCLOUD;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode link type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD;
	explode wake1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wake2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
