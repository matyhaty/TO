#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, body, tail, rotor3, rotor1, rotor2, lbase,
       llauncher, rbase, rlauncher, chaingun, gunbarrels, gunfire, shell, boosters,
       ltail, rtail;

static-var  bMoving, unitviewer, restore_delay, gun_2;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

flames(Func_Var_1)
{
	Func_Var_1 = 0;
	while( bMoving )
	{
		emit-sfx 1024 + 2 from ltail;
		emit-sfx 1024 + 2 from rtail;
		sleep 30;
	}
}

Create()
{
	unitviewer = FALSE;
	restore_delay = 3000;
	gun_2 = flare1;
	start-script SmokeUnit();
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

StopMoving()
{
	signal SIG_MOVE;
	stop-spin rotor1 around y-axis decelerate <2.000000>;
	stop-spin rotor2 around y-axis decelerate <2.000000>;
	stop-spin rotor3 around x-axis decelerate <3.000000>;
	turn boosters to x-axis <0.000000> speed <100.000000>;
	bMoving = FALSE;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn boosters to x-axis <45.000000> speed <200.000000>;
	spin rotor1 around y-axis speed <777.000000>;
	spin rotor2 around y-axis speed <777.000000>;
	spin rotor3 around x-axis speed <777.000000>;
	bMoving = TRUE;
	start-script flames();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 + Func_Var_1;
}

RestoreAfterDelay()
{
	signal 8;
	set-signal-mask 8;
	sleep restore_delay;
	turn chaingun to y-axis <0.000000> speed <200.000000>;
	stop-spin gunbarrels around z-axis decelerate <30.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	spin gunbarrels around z-axis speed <360.000000> accelerate <100.000000>;
	turn chaingun to y-axis heading speed <200.000000>;
	wait-for-turn chaingun around y-axis;
	return (1);
}

AimSecondary(heading, pitch)
{
}

AimFromPrimary(piecenum)
{
	piecenum = chaingun;
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = lbase;
	}
	if( gun_2 == 1 )
	{
		piecenum = rbase;
	}
}

QueryPrimary(piecenum)
{
	piecenum = gunfire;
}

QuerySecondary(piecenum)
{
	piecenum = gun_2;
}

Shot1()
{
	emit-sfx 1024 + 0 from gunfire;
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		emit-sfx 1024 + 1 from flare1;
		move llauncher to z-axis [-1.500000] speed [100.000000];
		sleep 200;
		move llauncher to z-axis [0.000000] speed [1.000000];
		gun_2 = flare2;
		return (1);
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1024 + 1 from flare2;
		move rlauncher to z-axis [-1.500000] speed [100.000000];
		sleep 200;
		move rlauncher to z-axis [0.000000] speed [1.000000];
		gun_2 = flare1;
	}
}

Killed(severity, corpsetype)
{
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode llauncher type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode rlauncher type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode lbase type NOHEATCLOUD;
	explode rbase type NOHEATCLOUD;
	explode boosters type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode rotor1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode rotor2 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode chaingun type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode gunbarrels type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	corpsetype = 3;
	return (corpsetype);
}
