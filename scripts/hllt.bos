#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret1, flare1, turret2, flare2;

static-var  restore_delay, unitviewer;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	unitviewer = FALSE;
	restore_delay = 2000;
	hide flare1;
	hide flare2;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <360.000000>;
	turn turret1 to x-axis <0.000000> - pitch speed <360.000000>;
	wait-for-turn turret1 around y-axis;
	return (1);
}

FirePrimary()
{
	show flare1;
	sleep 140;
	hide flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <360.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <360.000000>;
	wait-for-turn turret2 around y-axis;
	return (1);
}

FireSecondary()
{
	show flare2;
	sleep 150;
	hide flare2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER;
		explode body type NOHEATCLOUD | SHATTER;
		explode turret1 type NOHEATCLOUD | SHATTER;
		explode flare1 type NOHEATCLOUD | SHATTER;
		explode turret2 type NOHEATCLOUD | SHATTER;
		explode flare2 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
