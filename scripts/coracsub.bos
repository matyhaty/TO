#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, exhaust, door1, door2, boom, neck, gun;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	move exhaust to y-axis [-0.403186] now;
	move exhaust to z-axis [3.775989] now;
	move flare to y-axis [0.172803] now;
	move flare to z-axis [-1.375995] now;
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-227.868132> speed <209.236264>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <227.516484> speed <208.912088>;
	sleep 1089;
	turn boom to x-axis <39.379121> speed <42.989011>;
	turn neck to x-axis <-39.027473> speed <42.604396>;
	sleep 916;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn neck to y-axis <0.000000> speed <160.038462>;
	wait-for-turn neck around y-axis;
	move exhaust to y-axis [-0.403186] now;
	move exhaust to z-axis [3.775989] now;
	move flare to y-axis [0.172803] now;
	move flare to z-axis [-1.375995] now;
	turn boom to x-axis <39.379121> now;
	turn boom to x-axis <0.000000> speed <51.813187>;
	turn door1 to z-axis <-227.868132> now;
	turn door2 to z-axis <227.516484> now;
	turn neck to x-axis <-39.027473> now;
	turn neck to x-axis <0.000000> speed <51.357143>;
	sleep 760;
	turn door1 to z-axis <0.000000> speed <185.258242>;
	turn door2 to z-axis <0.000000> speed <184.967033>;
	sleep 1230;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 259 from exhaust;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 )
		{
			call-script deactivatescr();
			Static_Var_1 = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			Static_Var_1 = 0;
			currentstate = 0;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	while( Static_Var_1 )
	{
		sleep 100;
	}
	signal 4;
	turn neck to y-axis Func_Var_1 speed <160.038462>;
	wait-for-turn neck around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 6000;
	set-signal-mask 0;
	signal 4;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode boom type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode exhaust type NOHEATCLOUD;
		explode flare type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode neck type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode boom type NOHEATCLOUD | FALL;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode exhaust type NOHEATCLOUD | FALL;
		explode flare type NOHEATCLOUD | FALL;
		explode gun type NOHEATCLOUD | FALL;
		explode neck type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode boom type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode exhaust type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode flare type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode neck type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode boom type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode exhaust type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode flare type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode gun type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode neck type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
