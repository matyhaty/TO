#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, turret1, turret2, leg1, leg2, leg3, leg4,
       leg5, leg6, base;

static-var  bMoving, restore_delay, Static_Var_3, gun_1, gun_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	bMoving = FALSE;
	gun_1 = flare1;
	gun_2 = flare1;
	spin flare1 around z-axis speed <300.000000>;
	spin flare2 around z-axis speed <300.000000>;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	restore_delay = 3000;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <250.000000>;
	turn turret1 to x-axis <0.000000> speed <90.000000>;
	turn turret2 to y-axis <0.000000> speed <250.000000>;
	turn turret2 to x-axis <0.000000> speed <90.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43.791209> now;
			turn leg1 to y-axis <0.000000> speed <218.956044>;
			turn leg1 to z-axis <0.604396> now;
			turn leg1 to z-axis <0.000000> speed <3.027473>;
			turn leg2 to z-axis <0.000000> now;
			turn leg2 to z-axis <31.005495> speed <155.104396>;
			turn leg3 to y-axis <34.670330> now;
			turn leg3 to y-axis <34.060440> speed <3.027473>;
			turn leg3 to z-axis <31.615385> now;
			turn leg3 to z-axis <0.604396> speed <155.104396>;
			turn leg4 to y-axis <-40.137363> now;
			turn leg4 to y-axis <-40.137363> speed <0.000000>;
			turn leg4 to z-axis <-31.005495> now;
			turn leg4 to z-axis <-0.604396> speed <152.060440>;
			turn leg5 to y-axis <-37.093407> now;
			turn leg5 to y-axis <0.000000> speed <185.505495>;
			turn leg5 to z-axis <0.000000> now;
			turn leg5 to z-axis <0.000000> speed <0.000000>;
			turn leg6 to y-axis <0.000000> now;
			turn leg6 to y-axis <-30.412088> speed <152.060440>;
			turn leg6 to z-axis <-45.005495> now;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <31.615385> speed <158.126374>;
			turn leg2 to y-axis <34.670330> speed <173.346154>;
			turn leg2 to z-axis <31.005495> speed <0.000000>;
			turn leg3 to y-axis <0.000000> speed <170.302198>;
			turn leg3 to z-axis <0.000000> speed <3.027473>;
			turn leg4 to y-axis <0.000000> speed <200.714286>;
			turn leg5 to z-axis <-31.005495> speed <155.104396>;
			turn leg6 to z-axis <2.423077> speed <237.214286>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.945055> speed <279.780220>;
			turn leg1 to z-axis <31.005495> speed <3.027473>;
			turn leg2 to y-axis <34.670330> speed <0.000000>;
			turn leg2 to z-axis <0.604396> speed <152.060440>;
			turn leg3 to z-axis <31.615385> speed <158.126374>;
			turn leg4 to y-axis <-0.604396> speed <3.027473>;
			turn leg4 to z-axis <-31.005495> speed <152.060440>;
			turn leg5 to y-axis <-31.615385> speed <158.126374>;
			turn leg5 to z-axis <-31.005495> speed <0.000000>;
			turn leg6 to y-axis <3.027473> speed <167.258242>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <43.791209> speed <60.824176>;
			turn leg1 to z-axis <0.604396> speed <152.060440>;
			turn leg2 to y-axis <0.000000> speed <173.346154>;
			turn leg2 to z-axis <0.000000> speed <3.027473>;
			turn leg3 to y-axis <34.670330> speed <173.346154>;
			turn leg3 to z-axis <31.615385> speed <0.000000>;
			turn leg4 to y-axis <-40.137363> speed <197.681319>;
			turn leg4 to z-axis <-31.005495> speed <0.000000>;
			turn leg5 to y-axis <-37.093407> speed <27.368132>;
			turn leg5 to z-axis <0.000000> speed <155.104396>;
			turn leg6 to y-axis <0.000000> speed <15.203297>;
			turn leg6 to z-axis <-45.005495> speed <237.214286>;
			sleep 200;
		}
		if( !bMoving )
		{
			turn leg1 to y-axis <0.000000> speed <100.000000>;
			turn leg1 to z-axis <0.000000> speed <150.000000>;
			turn leg2 to y-axis <0.000000> speed <100.000000>;
			turn leg2 to z-axis <0.000000> speed <150.000000>;
			turn leg3 to y-axis <0.000000> speed <100.000000>;
			turn leg3 to z-axis <0.000000> speed <150.000000>;
			turn leg4 to y-axis <0.000000> speed <100.000000>;
			turn leg4 to z-axis <0.000000> speed <150.000000>;
			turn leg5 to y-axis <0.000000> speed <100.000000>;
			turn leg5 to z-axis <0.000000> speed <150.000000>;
			turn leg6 to y-axis <0.000000> speed <100.000000>;
			turn leg6 to z-axis <0.000000> speed <150.000000>;
			sleep 200;
		}
	}
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <250.000000>;
	turn turret1 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <250.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		move flare1 to x-axis [1.000000] now;
	}
	if( gun_1 == 1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		move flare1 to x-axis [-1.000000] now;
	}
	++gun_1;
	if( gun_1 > 2 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		move flare1 to x-axis [0.000000] now;
		gun_1 = flare1;
	}
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		move flare2 to x-axis [1.000000] now;
	}
	if( gun_2 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		move flare2 to x-axis [-1.000000] now;
	}
	++gun_2;
	if( gun_2 > 2 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		move flare2 to x-axis [0.000000] now;
		gun_2 = flare1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

Killed(severity, corpsetype)
{
	hide flare1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret2 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD;
		explode leg2 type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD;
		explode leg4 type NOHEATCLOUD;
		explode leg5 type NOHEATCLOUD;
		explode leg6 type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret2 type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD | FALL;
		explode leg1 type NOHEATCLOUD | FALL;
		explode leg2 type NOHEATCLOUD | FALL;
		explode leg3 type NOHEATCLOUD | FALL;
		explode leg4 type NOHEATCLOUD | FALL;
		explode leg5 type NOHEATCLOUD | FALL;
		explode leg6 type NOHEATCLOUD | FALL;
		explode turret1 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret1 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD;
	explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
