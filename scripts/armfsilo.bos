#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, deck, tower, fnuke, smoke1, smoke2, smoke3, smoke4,
       holder, roof1, roof2, fix;

static-var  Static_Var_1, restore_delay, gun_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	sleep 300;
	turn roof1 to z-axis <-90.016484> speed <30.000000>;
	turn roof2 to z-axis <90.016484> speed <30.000000>;
	sleep 500;
	move roof1 to y-axis [-6.000000] speed [5.000000];
	move roof2 to y-axis [-6.000000] speed [5.000000];
	sleep 800;
	move deck to y-axis [8.000000] speed [4.000000];
	wait-for-move deck along y-axis;
	sleep 800;
	turn tower to x-axis <-90.016484> speed <5.000000>;
	wait-for-turn tower around x-axis;
	sleep 400;
	move holder to x-axis [-2.000000] speed [2.000000];
	sleep 300;
	gun_1 = deck;
	if( gun_1 == 1 )
	{
		emit-sfx 1024 from smoke1;
		sleep 1000;
	}
	sleep 300;
	gun_1 = tower;
	if( gun_1 == 2 )
	{
		emit-sfx 1024 from smoke1;
		sleep 1000;
	}
	sleep 100;
	gun_1 = fnuke;
	if( gun_1 == 3 )
	{
		emit-sfx 1024 from smoke1;
		sleep 1000;
	}
	sleep 100;
}

deactivatescr()
{
	sleep 300;
	move holder to x-axis [0.000000] speed [0.000000];
	sleep 400;
	turn tower to x-axis <0.000000> speed <18.000000>;
	wait-for-turn tower around x-axis;
	sleep 600;
	move deck to y-axis [0.000000] speed [8.000000];
	wait-for-move deck along y-axis;
	sleep 600;
	move roof1 to y-axis [0.000000] speed [5.000000];
	move roof2 to y-axis [0.000000] speed [5.000000];
	sleep 400;
	turn roof1 to z-axis <0.000000> speed <30.000000>;
	turn roof2 to z-axis <0.000000> speed <30.000000>;
	wait-for-turn roof1 around z-axis;
	wait-for-turn roof2 around z-axis;
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache roof1;
	dont-cache roof2;
	dont-cache fnuke;
	dont-cache deck;
	dont-cache tower;
	show fnuke;
	show holder;
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	sleep 4000;
	call-script deactivatescr();
	cache roof1;
	cache roof2;
	cache fnuke;
	cache deck;
	cache tower;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-cache roof1;
	dont-cache roof2;
	dont-cache fnuke;
	dont-cache deck;
	dont-cache tower;
	dont-cache base;
	dont-shade roof1;
	dont-shade roof2;
	dont-shade fnuke;
	dont-shade deck;
	dont-shade tower;
	dont-shade base;
	dont-shade fix;
	dont-cache fix;
	gun_1 = base;
	Static_Var_1 = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide fnuke;
	hide holder;
	if( gun_1 == 3 )
	{
		emit-sfx 1024 from smoke1;
		sleep 1000;
	}
	sleep 1000;
	gun_1 = base;
	Static_Var_1 = 0;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = fnuke;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode tower type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode holder type NOHEATCLOUD;
		explode roof1 type NOHEATCLOUD;
		explode roof2 type NOHEATCLOUD;
		explode fnuke type NOHEATCLOUD;
		explode deck type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode tower type NOHEATCLOUD | SHATTER;
		explode base type NOHEATCLOUD;
		explode holder type NOHEATCLOUD;
		explode roof1 type NOHEATCLOUD | FALL;
		explode roof2 type NOHEATCLOUD | FALL;
		explode fnuke type NOHEATCLOUD;
		explode deck type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode tower type NOHEATCLOUD | SHATTER;
		explode base type NOHEATCLOUD;
		explode holder type NOHEATCLOUD;
		explode roof1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roof2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode fnuke type NOHEATCLOUD;
		explode deck type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode tower type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD;
	explode holder type NOHEATCLOUD;
	explode roof1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roof2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode fnuke type NOHEATCLOUD;
	explode deck type NOHEATCLOUD;
	return (corpsetype);
}
