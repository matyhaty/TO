#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pivot, body, rupleg3, rleg3, rupleg2, rleg2, rupleg1,
       rleg1, lupleg3, lleg3, lupleg2, lleg2, lupleg1, lleg1, sleeve3,
       flare3a, flare3b, flare3c, tur3;

static-var  bMoving, bAiming, gun_1, restore_delay, Static_Var_5,
            Static_Var_6, Static_Var_7;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8


RestoreAfterDelay()
{
	sleep restore_delay;
	if( !Static_Var_5 )
	{
		turn tur3 to y-axis <0.000000> speed <150.000000>;
		turn sleeve3 to x-axis <0.000000> speed <150.000000>;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Static_Var_5 AND !Static_Var_6 )
		{
			Static_Var_5 = 0;
			Static_Var_6 = 1;
			start-script RestoreAfterDelay();
		}
	}
}

Create()
{
	gun_1 = base;
	hide flare3a;
	hide flare3b;
	hide flare3c;
	restore_delay = 3000;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

StartMoving()
{
	if( bMoving )
	{
		return (0);
	}
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while( bMoving )
	{
		if( bMoving )
		{
			if( !bAiming )
			{
				turn base to x-axis <2.093407> now;
				turn base to y-axis <1.049451> now;
			}
			turn base to x-axis <0.000000> speed <14.000000>;
			turn base to y-axis <0.000000> speed <2.000000>;
			turn rupleg1 to y-axis <25.000000> speed <135.000000>;
			turn rupleg1 to z-axis <0.000000> speed <97.000000>;
			turn rupleg2 to y-axis <-25.000000> speed <95.000000>;
			turn rupleg3 to y-axis <0.000000> speed <135.000000>;
			turn rupleg3 to z-axis <32.500000> speed <67.000000>;
			turn lupleg1 to y-axis <0.000000> speed <135.000000>;
			turn lupleg1 to z-axis <-32.500000> speed <67.000000>;
			turn lupleg2 to y-axis <-25.000000> speed <135.000000>;
			turn lupleg2 to z-axis <0.000000> speed <97.000000>;
			turn lupleg3 to y-axis <25.000000> speed <95.000000>;
			turn rleg1 to z-axis <0.000000> speed <97.000000>;
			turn rleg3 to z-axis <-16.247253> speed <67.000000>;
			turn lleg1 to z-axis <16.247253> speed <67.000000>;
			turn lleg2 to z-axis <0.000000> speed <97.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			if( !bAiming )
			{
				turn base to x-axis <-1.000000> speed <7.000000>;
			}
			turn base to y-axis <0.000000> speed <7.000000>;
			turn rupleg1 to y-axis <0.000000> speed <95.000000>;
			turn rupleg2 to y-axis <11.247253> speed <135.000000>;
			turn rupleg2 to z-axis <16.247253> speed <77.000000>;
			turn rupleg3 to y-axis <12.500000> speed <115.000000>;
			turn rupleg3 to z-axis <16.247253> speed <77.000000>;
			turn lupleg1 to y-axis <-12.500000> speed <115.000000>;
			turn lupleg1 to z-axis <-16.247253> speed <77.000000>;
			turn lupleg2 to y-axis <0.000000> speed <95.000000>;
			turn lupleg3 to y-axis <12.500000> speed <115.000000>;
			turn lupleg3 to z-axis <-16.247253> speed <77.000000>;
			turn rleg2 to z-axis <-8.115385> speed <77.000000>;
			turn rleg3 to z-axis <-8.115385> speed <77.000000>;
			turn lleg1 to z-axis <8.115385> speed <77.000000>;
			turn lleg3 to z-axis <8.115385> speed <77.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			if( !bAiming )
			{
				turn base to x-axis <-1.000000> speed <2.000000>;
				turn base to y-axis <-1.000000> speed <4.000000>;
			}
			turn rupleg1 to y-axis <-25.000000> speed <95.000000>;
			turn rupleg2 to y-axis <0.000000> speed <95.000000>;
			turn rupleg2 to z-axis <32.500000> speed <67.000000>;
			turn rupleg3 to y-axis <25.000000> speed <135.000000>;
			turn rupleg3 to z-axis <0.000000> speed <97.000000>;
			turn lupleg1 to y-axis <-25.000000> speed <135.000000>;
			turn lupleg1 to z-axis <0.000000> speed <97.000000>;
			turn lupleg2 to y-axis <25.000000> speed <135.000000>;
			turn lupleg3 to y-axis <0.000000> speed <95.000000>;
			turn lupleg3 to z-axis <-32.500000> speed <67.000000>;
			turn rleg2 to z-axis <-16.247253> speed <67.000000>;
			turn rleg3 to z-axis <0.000000> speed <97.000000>;
			turn lleg1 to z-axis <0.000000> speed <97.000000>;
			turn lleg3 to z-axis <16.247253> speed <67.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <4.000000>;
			turn base to y-axis <0.000000> speed <7.000000>;
			turn rupleg1 to y-axis <-12.500000> speed <95.000000>;
			turn rupleg1 to z-axis <16.247253> speed <77.000000>;
			turn rupleg2 to y-axis <12.500000> speed <115.000000>;
			turn rupleg2 to z-axis <16.247253> speed <77.000000>;
			turn rupleg3 to y-axis <0.000000> speed <95.000000>;
			turn lupleg1 to y-axis <0.000000> speed <135.000000>;
			turn lupleg2 to y-axis <12.500000> speed <95.000000>;
			turn lupleg2 to z-axis <-16.247253> speed <77.000000>;
			turn lupleg3 to y-axis <-12.500000> speed <95.000000>;
			turn lupleg3 to z-axis <-16.247253> speed <87.000000>;
			turn rleg1 to z-axis <-8.115385> speed <77.000000>;
			turn rleg2 to z-axis <-8.115385> speed <77.000000>;
			turn lleg2 to z-axis <8.115385> speed <77.000000>;
			turn lleg3 to z-axis <8.115385> speed <77.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <9.000000>;
			if( !bAiming )
			{
				turn base to y-axis <1.000000> speed <9.000000>;
			}
			turn rupleg1 to y-axis <0.000000> speed <115.000000>;
			turn rupleg1 to z-axis <32.500000> speed <67.000000>;
			turn rupleg2 to y-axis <25.000000> speed <115.000000>;
			turn rupleg2 to z-axis <0.000000> speed <97.000000>;
			turn rupleg3 to y-axis <-25.000000> speed <95.000000>;
			turn lupleg1 to y-axis <25.000000> speed <95.000000>;
			turn lupleg2 to y-axis <0.000000> speed <115.000000>;
			turn lupleg2 to z-axis <-32.500000> speed <67.000000>;
			turn lupleg3 to y-axis <-25.000000> speed <135.000000>;
			turn lupleg3 to z-axis <0.000000> speed <97.000000>;
			turn rleg1 to z-axis <-16.247253> speed <67.000000>;
			turn rleg2 to z-axis <0.000000> speed <97.000000>;
			turn lleg2 to z-axis <16.247253> speed <67.000000>;
			turn lleg3 to z-axis <0.000000> speed <97.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			if( !bAiming )
			{
				turn base to x-axis <1.000000> speed <4.000000>;
				turn base to y-axis <1.000000> speed <2.000000>;
			}
			turn rupleg1 to y-axis <12.500000> speed <135.000000>;
			turn rupleg1 to z-axis <16.247253> speed <77.000000>;
			turn rupleg2 to y-axis <0.000000> speed <95.000000>;
			turn rupleg3 to y-axis <-12.500000> speed <115.000000>;
			turn rupleg3 to z-axis <16.247253> speed <87.000000>;
			turn lupleg1 to y-axis <12.500000> speed <115.000000>;
			turn lupleg1 to z-axis <-16.247253> speed <87.000000>;
			turn lupleg2 to y-axis <-12.500000> speed <115.000000>;
			turn lupleg2 to z-axis <-16.247253> speed <87.000000>;
			turn lupleg3 to y-axis <0.000000> speed <115.000000>;
			turn rleg1 to z-axis <-8.115385> speed <77.000000>;
			turn rleg3 to z-axis <-8.115385> speed <77.000000>;
			turn lleg1 to z-axis <8.115385> speed <77.000000>;
			turn lleg2 to z-axis <8.115385> speed <77.000000>;
			sleep 210;
		}
	}
	turn base to x-axis <0.000000> speed <14.000000>;
	turn base to y-axis <0.000000> speed <2.000000>;
	turn rupleg1 to y-axis <0.000000> speed <115.000000>;
	turn rupleg1 to z-axis <0.000000> speed <87.000000>;
	turn rupleg2 to y-axis <0.000000> speed <115.000000>;
	turn rupleg2 to z-axis <0.000000> speed <87.000000>;
	turn rupleg3 to y-axis <0.000000> speed <115.000000>;
	turn rupleg3 to z-axis <0.000000> speed <87.000000>;
	turn lupleg1 to y-axis <0.000000> speed <115.000000>;
	turn lupleg1 to z-axis <0.000000> speed <87.000000>;
	turn lupleg2 to y-axis <0.000000> speed <115.000000>;
	turn lupleg2 to z-axis <0.000000> speed <87.000000>;
	turn lupleg3 to y-axis <0.000000> speed <115.000000>;
	turn lupleg3 to z-axis <0.000000> speed <87.000000>;
	turn lleg1 to z-axis <0.000000> speed <87.000000>;
	turn lleg2 to z-axis <0.000000> speed <87.000000>;
	turn lleg3 to z-axis <0.000000> speed <87.000000>;
	turn rleg1 to z-axis <0.000000> speed <87.000000>;
	turn rleg2 to z-axis <0.000000> speed <87.000000>;
	turn rleg3 to z-axis <0.000000> speed <87.000000>;
	sleep 210;
}

StopMoving()
{
	bMoving = FALSE;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	bAiming = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn tur3 to y-axis heading speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn tur3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 >= 3 )
	{
		gun_1 = base;
	}
	sleep 150;
}

Shot1()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from flare3c;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from flare3b;
	}
	if( gun_1 == 2 )
	{
		emit-sfx 1024 + 0 from flare3a;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = tur3;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare3c;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare3b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3a;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode lleg1 type NOHEATCLOUD;
		explode lleg2 type NOHEATCLOUD;
		explode lleg3 type NOHEATCLOUD;
		explode lupleg1 type NOHEATCLOUD;
		explode lupleg2 type NOHEATCLOUD;
		explode lupleg3 type NOHEATCLOUD;
		explode rleg1 type NOHEATCLOUD;
		explode rleg2 type NOHEATCLOUD;
		explode rleg3 type NOHEATCLOUD;
		explode rupleg1 type NOHEATCLOUD;
		explode rupleg2 type NOHEATCLOUD;
		explode rupleg3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode lleg1 type NOHEATCLOUD | FALL;
		explode lleg2 type NOHEATCLOUD | FALL;
		explode lleg3 type NOHEATCLOUD | FALL;
		explode lupleg1 type NOHEATCLOUD | FALL;
		explode lupleg2 type NOHEATCLOUD | FALL;
		explode lupleg3 type NOHEATCLOUD | FALL;
		explode rleg1 type NOHEATCLOUD | FALL;
		explode rleg2 type NOHEATCLOUD | FALL;
		explode rleg3 type NOHEATCLOUD | FALL;
		explode rupleg1 type NOHEATCLOUD | FALL;
		explode rupleg2 type NOHEATCLOUD | FALL;
		explode rupleg3 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode lleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lupleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lupleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lupleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rupleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rupleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rupleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
