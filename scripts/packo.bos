#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, door3, door4, turret, launcher, firep1,
       firep2;

static-var  Static_Var_1, restore_delay, gun_1, statechg_DesiredState, statechg_StateChanging,
            Static_Var_6, bAiming;

// Signal definitions
#define SIG_AIM				2


Activatescr()
{
	if( TRUE )
	{
		move door1 to y-axis [0.000000] now;
		move door1 to y-axis [-3.000000] speed [8.000000];
		move door2 to y-axis [0.000000] now;
		move door2 to y-axis [-3.000000] speed [8.000000];
		move door3 to y-axis [0.000000] now;
		move door3 to y-axis [-3.000000] speed [8.000000];
		move door4 to y-axis [0.000000] now;
		move door4 to y-axis [-3.000000] speed [8.000000];
		move turret to y-axis [0.000000] speed [25.000000];
		turn door1 to x-axis <90.016484> now;
		turn door1 to x-axis <0.000000> speed <225.000000>;
		turn door2 to z-axis <-90.016484> now;
		turn door2 to z-axis <0.000000> speed <225.000000>;
		turn door3 to x-axis <-90.016484> now;
		turn door3 to x-axis <0.000000> speed <225.000000>;
		turn door4 to z-axis <90.016484> now;
		turn door4 to z-axis <0.000000> speed <225.000000>;
		move turret to y-axis [4.000000] speed [15.000000];
		sleep 400;
	}
	sleep 25;
}

Deactivatescr()
{
	if( TRUE )
	{
		move door1 to y-axis [0.000000] now;
		move door1 to y-axis [0.000000] speed [0.000000];
		move door2 to y-axis [0.000000] now;
		move door2 to y-axis [0.000000] speed [0.000000];
		move door3 to y-axis [0.000000] now;
		move door3 to y-axis [0.000000] speed [0.000000];
		move door4 to y-axis [0.000000] now;
		move door4 to y-axis [0.000000] speed [0.000000];
		turn launcher to x-axis <0.000000> speed <80.000000>;
		turn launcher to y-axis <0.000000> speed <100.000000>;
		wait-for-turn launcher around x-axis;
		wait-for-turn launcher around y-axis;
		move turret to y-axis [-15.000000] speed [22.000000];
		turn door1 to x-axis <90.016484> speed <225.000000>;
		turn door2 to z-axis <-90.016484> speed <225.000000>;
		turn door3 to x-axis <-90.016484> speed <225.000000>;
		turn door4 to z-axis <90.016484> speed <225.000000>;
		sleep 300;
	}
	sleep 15;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	if( !Static_Var_1 )
	{
		call-script Activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script Deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
			Static_Var_6 = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	Static_Var_1 = 1;
	Static_Var_6 = 1;
	gun_1 = door1;
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	if( Static_Var_6 == 1 )
	{
		bAiming = Rand( 1, 800 );
		sleep bAiming;
		Static_Var_6 = 0;
		set CHANGE_TARGET to 1;
		return (0);
	}
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <450.000000>;
	turn launcher to x-axis <0.000000> - pitch speed <120.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 10;
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = firep1;
	}
	if( gun_1 == 1 )
	{
		piecenum = firep2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode launcher type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode door3 type NOHEATCLOUD;
		explode door4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode launcher type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode door3 type NOHEATCLOUD;
		explode door4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		if( Static_Var_1 )
		{
			explode launcher type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		}
		if( !Static_Var_1 )
		{
			explode launcher type NOHEATCLOUD;
		}
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode door3 type NOHEATCLOUD;
		explode door4 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 4;
	explode base type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode launcher type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode door3 type NOHEATCLOUD;
	explode door4 type NOHEATCLOUD;
	return (corpsetype);
}
