#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, barrel, flare, rlegf, rlegb, llegf,
       llegb;

static-var  bMoving, restore_delay;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

walkscr()
{
	turn llegb to z-axis <0.000000> now;
	turn llegb to z-axis <-38.258242> speed <910.000000>;
	turn rlegb to y-axis <55.357143> speed <660.280220>;
	turn rlegb to z-axis <38.258242> now;
	turn rlegb to z-axis <0.000000> speed <910.000000>;
	turn rlegf to y-axis <0.000000> now;
	turn rlegf to y-axis <60.302198> speed <1446.549451>;
	turn rlegf to z-axis <37.802198> speed <450.956044>;
	turn llegf to y-axis <-60.302198> now;
	turn llegf to y-axis <0.000000> speed <1446.549451>;
	turn llegf to z-axis <0.000000> now;
	sleep 42;
	turn llegb to y-axis <-55.357143> speed <1323.000000>;
	turn llegb to z-axis <-38.258242> speed <0.000000>;
	turn rlegb to y-axis <0.000000> speed <1321.000000>;
	turn rlegb to z-axis <0.000000> speed <0.000000>;
	turn rlegf to z-axis <0.000000> speed <910.000000>;
	turn llegf to z-axis <-38.258242> speed <910.000000>;
	sleep 42;
	turn llegb to y-axis <-55.357143> speed <0.000000>;
	turn llegb to z-axis <0.000000> speed <910.000000>;
	turn rlegb to z-axis <38.258242> speed <910.000000>;
	turn rlegf to y-axis <0.000000> speed <1442.000000>;
	turn rlegf to z-axis <0.000000> speed <0.000000>;
	turn llegf to y-axis <-60.302198> speed <1442.000000>;
	turn llegf to z-axis <-38.258242> speed <0.000000>;
	sleep 42;
	turn llegb to y-axis <0.000000> speed <1323.000000>;
	turn llegb to z-axis <0.000000> speed <0.000000>;
	turn rlegb to y-axis <55.357143> speed <1323.000000>;
	turn rlegb to z-axis <38.258242> speed <0.000000>;
	turn rlegf to z-axis <37.802198> speed <910.000000>;
	turn llegf to y-axis <-60.302198> speed <0.000000>;
	turn llegf to z-axis <0.000000> speed <910.000000>;
	sleep 42;
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

FirePrimary()
{
}

RestoreAfterDelay()
{
	signal 4;
	set-signal-mask 4;
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <270.000000>;
	turn barrel to x-axis <0.000000> speed <135.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <400.000000>;
	turn barrel to x-axis <0.000000> - pitch speed <450.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

Killed(severity, corpsetype)
{
	explode llegf type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode llegf type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode rlegb type NOHEATCLOUD;
	explode rlegf type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode barrel type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
