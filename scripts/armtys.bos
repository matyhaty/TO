#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rotor, wing_lf, wing_rf, turret, bar_l, bar_r, flare_l,
       flare_r, r_1, r_2, blank, fuse, cockpit, stab_l, stab_r,
       fin_l, fin_r, root_l, root_r, engine_l, engine_r;

static-var  gun_2, gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	spin rotor around y-axis speed <777.060440>;
	move turret to z-axis [0.000000] speed [2.000000];
}

Stop()
{
	spin rotor around y-axis speed <0.000000> accelerate <2.000000>;
	move turret to z-axis [-5.000000] speed [2.000000];
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	turn wing_lf to y-axis <-80.016484> now;
	turn wing_rf to y-axis <80.016484> now;
	move turret to z-axis [-5.000000] now;
	hide flare_l;
	hide flare_r;
	gun_2 = rotor;
	gun_1 = rotor;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <35.000000>;
	turn bar_l to x-axis <0.000000> speed <15.000000>;
	turn bar_r to x-axis <0.000000> speed <15.000000>;
	turn blank to y-axis <0.000000> speed <35.000000>;
	turn blank to x-axis <0.000000> speed <15.000000>;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn blank to y-axis heading speed <390.000000>;
	turn blank to x-axis <0.000000> - pitch speed <350.000000>;
	turn blank to x-axis <0.000000> - pitch speed <350.000000>;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = blank;
}

FireSecondary()
{
	if( gun_2 == 1 )
	{
		show r_1;
		sleep 150;
		hide r_1;
		gun_2 = wing_lf;
		return (0);
	}
	if( gun_2 == 2 )
	{
		show r_2;
		sleep 150;
		hide r_2;
		gun_2 = rotor;
		return (0);
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 1 )
	{
		piecenum = r_1;
	}
	if( gun_2 == 2 )
	{
		piecenum = r_2;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		move bar_l to z-axis [-0.800000] speed [200.000000];
		wait-for-move bar_l along z-axis;
		move bar_l to z-axis [0.000000] speed [3.000000];
		show flare_l;
		sleep 150;
		hide flare_l;
		gun_1 = wing_lf;
		return (0);
	}
	if( gun_1 == 2 )
	{
		move bar_r to z-axis [-0.800000] speed [200.000000];
		wait-for-move bar_r along z-axis;
		move bar_r to z-axis [0.000000] speed [3.000000];
		show flare_r;
		sleep 150;
		hide flare_r;
		gun_1 = rotor;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare_l;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare_r;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode fuse type NOHEATCLOUD | SHATTER;
		explode cockpit type NOHEATCLOUD;
		explode stab_l type NOHEATCLOUD;
		explode stab_r type NOHEATCLOUD;
		explode fin_l type NOHEATCLOUD;
		explode fin_r type NOHEATCLOUD;
		explode root_l type NOHEATCLOUD;
		explode root_r type NOHEATCLOUD;
		explode wing_lf type NOHEATCLOUD;
		explode wing_rf type NOHEATCLOUD;
		explode engine_l type NOHEATCLOUD;
		explode engine_r type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode bar_l type NOHEATCLOUD;
		explode bar_r type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode fuse type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode cockpit type NOHEATCLOUD | FALL;
		explode stab_l type NOHEATCLOUD | FALL;
		explode stab_r type NOHEATCLOUD | FALL;
		explode fin_l type NOHEATCLOUD | FALL;
		explode fin_r type NOHEATCLOUD | FALL | SMOKE;
		explode root_l type NOHEATCLOUD | FALL | FIRE;
		explode root_r type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode wing_lf type NOHEATCLOUD | SHATTER;
		explode wing_rf type NOHEATCLOUD | FALL | SMOKE | FIRE;
		explode engine_l type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
		explode engine_r type NOHEATCLOUD | FALL | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL;
		explode bar_l type NOHEATCLOUD | SHATTER;
		explode bar_r type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode fuse type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode cockpit type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode stab_l type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode stab_r type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode fin_l type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode fin_r type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode root_l type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode root_r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wing_lf type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode wing_rf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode engine_l type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode engine_r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode bar_l type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode bar_r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode fuse type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode cockpit type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode stab_l type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode stab_r type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode fin_l type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode fin_r type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode root_l type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode root_r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wing_lf type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode wing_rf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode engine_l type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode engine_r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bar_l type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode bar_r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
