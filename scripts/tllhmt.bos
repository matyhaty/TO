#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, foundation, turret, ammo1, ammo2, ammo3, ammo4, flare1,
       flare2, socle, arm1, arm2;

static-var  gun_1, Static_Var_2, Static_Var_3;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from ammo1;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	dont-shade foundation;
	dont-shade turret;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade arm1;
	dont-shade arm2;
	dont-shade ammo1;
	dont-shade ammo2;
	dont-shade ammo3;
	dont-shade ammo4;
	cache foundation;
	cache turret;
	cache flare1;
	cache flare2;
	cache ammo1;
	cache ammo2;
	cache ammo3;
	cache ammo4;
	gun_1 = base;
	Static_Var_2 = 0;
	Static_Var_3 = 5000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep Static_Var_3;
	turn arm1 to z-axis <0.000000> speed <50.000000>;
	turn arm2 to z-axis <0.000000> speed <100.000000>;
	turn turret to z-axis <0.000000> speed <50.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn arm1 to z-axis <-25.000000> speed <40.000000>;
	turn arm2 to z-axis <50.000000> speed <80.000000>;
	turn turret to z-axis <-25.000000> speed <40.000000>;
	turn socle to y-axis heading speed <100.000000>;
	wait-for-turn socle around y-axis;
	wait-for-turn turret around z-axis;
	while( Static_Var_2 )
	{
		sleep 50;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		sleep 200;
		hide flare1;
		gun_1 = foundation;
		return (0);
	}
	if( gun_1 == 1 )
	{
		show flare2;
		Static_Var_2 = 1;
		move ammo1 to z-axis [-5.000000] speed [5.000000];
		sleep 200;
		hide flare2;
		wait-for-move ammo1 along z-axis;
		move ammo1 to y-axis [-2.000000] speed [2.000000];
		move ammo4 to y-axis [-2.000000] speed [2.000000];
		move ammo2 to y-axis [2.000000] speed [2.000000];
		move ammo3 to y-axis [2.000000] speed [2.000000];
		wait-for-move ammo3 along y-axis;
		move ammo1 to y-axis [0.000000] now;
		move ammo2 to y-axis [0.000000] now;
		move ammo3 to y-axis [0.000000] now;
		move ammo4 to y-axis [0.000000] now;
		move ammo1 to z-axis [0.000000] now;
		Static_Var_2 = 0;
		gun_1 = base;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = ammo1;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	explode ammo1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode ammo2 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode ammo3 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode foundation type NOHEATCLOUD;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	corpsetype = 3;
	return (corpsetype);
}
