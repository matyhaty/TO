#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, tur1, tur2, tur3, sleeve1, sleeve2, sleeve3, wake1,
       wake2, body, barrel1a, barrel1b, barrel2a, barrel2b, barrel2c, flare1a,
       flare1b, flare2a, flare2b, flare2c, flare3a, flare3b, flare3c;

static-var  gun_1, gun_2, gun_3, restore_delay, Static_Var_5;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_MOVE			16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	hide flare3a;
	hide flare3b;
	hide flare3c;
	gun_1 = base;
	gun_2 = base;
	gun_3 = base;
	Static_Var_5 = 1;
	restore_delay = 3000;
	start-script SmokeUnit();
}

Reload()
{
	sleep 2250;
	Static_Var_5 = 1;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay1()
{
	sleep restore_delay;
	turn tur1 to y-axis <0.000000> speed <5.000000>;
	turn sleeve1 to x-axis <0.000000> speed <5.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn tur2 to y-axis <0.000000> speed <55.000000>;
	turn sleeve2 to x-axis <0.000000> speed <25.000000>;
}

RestoreAfterDelay3()
{
	sleep restore_delay;
	turn tur3 to y-axis <0.000000> speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> speed <150.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn tur1 to y-axis heading speed <10.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <10.000000>;
	wait-for-turn tur1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn tur2 to y-axis heading speed <80.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <55.000000>;
	wait-for-turn tur2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !Static_Var_5 )
	{
		sleep 25;
	}
	turn tur3 to y-axis heading speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn tur3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1a to z-axis [-2.000000] speed [500.000000];
		show flare1a;
		sleep 150;
		move barrel1a to z-axis [0.000000] speed [0.500000];
		hide flare1a;
		gun_1 = tur1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrel1b to z-axis [-2.000000] speed [500.000000];
		show flare1b;
		sleep 150;
		move barrel1b to z-axis [0.000000] speed [0.500000];
		hide flare1b;
		gun_1 = base;
		return (0);
	}
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move barrel2a to z-axis [-1.000000] speed [500.000000];
		show flare2a;
		sleep 150;
		move barrel2a to z-axis [0.000000] speed [1.000000];
		hide flare2a;
		gun_2 = tur1;
		return (0);
	}
	if( gun_2 == 1 )
	{
		move barrel2b to z-axis [-1.000000] speed [500.000000];
		show flare2b;
		sleep 150;
		move barrel2b to z-axis [0.000000] speed [1.000000];
		hide flare2b;
		gun_2 = tur2;
		return (0);
	}
	if( gun_2 == 2 )
	{
		move barrel2c to z-axis [-1.000000] speed [500.000000];
		show flare2c;
		sleep 150;
		move barrel2c to z-axis [0.000000] speed [1.000000];
		hide flare2c;
		gun_2 = base;
		return (0);
	}
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		show flare3a;
		sleep 150;
		hide flare3a;
		gun_3 = tur1;
		return (0);
	}
	if( gun_3 == 1 )
	{
		show flare3b;
		sleep 150;
		hide flare3b;
		gun_3 = tur2;
		return (0);
	}
	if( gun_3 == 2 )
	{
		show flare3c;
		sleep 150;
		hide flare3c;
		gun_3 = base;
		Static_Var_5 = 0;
		call-script Reload();
	}
}

AimFromPrimary(piecenum)
{
	piecenum = tur1;
}

AimFromSecondary(piecenum)
{
	piecenum = tur2;
}

AimFromTertiary(piecenum)
{
	piecenum = tur3;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare2a;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare2b;
	}
	if( gun_2 == 2 )
	{
		piecenum = flare2c;
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare3a;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare3b;
	}
	if( gun_3 == 2 )
	{
		piecenum = flare3c;
	}
}

SweetSpot(piecenum)
{
	piecenum = tur1;
}

Killed(severity, corpsetype)
{
	explode barrel1a type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode barrel2b type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode barrel2c type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD;
	explode tur1 type NOHEATCLOUD;
	explode tur3 type NOHEATCLOUD;
	explode wake1 type NOHEATCLOUD;
	explode wake2 type NOHEATCLOUD;
	explode flare1a type NOHEATCLOUD;
	explode flare2b type NOHEATCLOUD;
	explode flare3b type NOHEATCLOUD;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode tur1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode barrel2a type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode tur3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode barrel1a type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
