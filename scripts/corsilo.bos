#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, missile, doora1, doora2, collar, doorb5, doorb6, doorb2,
       doorb4, doorb1, doorb3, lnchpad, fp, motor;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		move doora1 to x-axis [0.000000] now;
		move doora1 to x-axis [8.000000] speed [7.000000];
		move doora2 to x-axis [0.000000] now;
		move doora2 to x-axis [-8.000000] speed [7.000000];
		move collar to y-axis [0.000000] now;
		move doorb5 to y-axis [0.000000] now;
		move doorb6 to y-axis [0.000000] now;
		move missile to x-axis [-0.100000] now;
		move missile to y-axis [0.000000] now;
		move missile to z-axis [0.100000] now;
		sleep 941;
	}
	if( TRUE )
	{
		move collar to y-axis [6.500000] speed [10.000000];
		sleep 802;
	}
	if( TRUE )
	{
		turn doorb5 to z-axis <89.390110> speed <150.500000>;
		turn doorb6 to z-axis <-90.000000> speed <151.500000>;
		turn doorb2 to x-axis <-181.390110> speed <305.390110>;
		turn doorb4 to x-axis <180.593407> speed <304.093407>;
		turn doorb1 to x-axis <-181.000000> speed <304.692308>;
		turn doorb3 to x-axis <179.890110> speed <302.791209>;
		sleep 594;
	}
	if( TRUE )
	{
		move lnchpad to y-axis [27.200000] speed [18.200000];
		sleep 591;
	}
	emit-sfx 1024 from motor;
	sleep 1028;
}

deactivatescr()
{
	if( TRUE )
	{
		move doora1 to x-axis [8.000000] now;
		move doora2 to x-axis [-8.000000] now;
		move collar to y-axis [6.500000] now;
		move lnchpad to y-axis [27.200000] now;
		move lnchpad to y-axis [0.000000] speed [16.400000];
		move missile to x-axis [-0.100000] now;
		move missile to y-axis [0.000000] now;
		move missile to z-axis [0.100000] now;
		turn doorb5 to z-axis <90.016484> now;
		turn doorb6 to z-axis <-90.016484> now;
		turn doorb2 to x-axis <-180.038462> now;
		turn doorb4 to x-axis <180.038462> now;
		turn doorb1 to x-axis <-180.038462> now;
		turn doorb3 to x-axis <180.038462> now;
		sleep 1746;
	}
	if( TRUE )
	{
		turn doorb5 to z-axis <0.000000> speed <190.593407>;
		turn doorb6 to z-axis <0.000000> speed <191.890110>;
		turn doorb2 to x-axis <0.000000> speed <386.692308>;
		turn doorb4 to x-axis <0.000000> speed <385.093407>;
		turn doorb1 to x-axis <0.000000> speed <385.890110>;
		turn doorb3 to x-axis <0.000000> speed <383.500000>;
		sleep 469;
	}
	if( TRUE )
	{
		move collar to y-axis [0.000000] speed [6.400000];
		sleep 836;
	}
	if( TRUE )
	{
		move doora1 to x-axis [0.000000] speed [7.800000];
		move doora2 to x-axis [0.000000] speed [7.800000];
		sleep 576;
	}
	sleep 10000;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	show missile;
	call-script activatescr();
	gun_1 = missile;
}

Stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	gun_1 = base;
	dont-shade collar;
	dont-shade doora1;
	dont-shade doora2;
	dont-shade doorb1;
	dont-shade doorb2;
	dont-shade doorb3;
	dont-shade doorb4;
	dont-shade doorb5;
	dont-shade doorb6;
	dont-shade lnchpad;
	dont-shade missile;
	restore_delay = 3000;
	start-script SmokeUnit();
}

Activate()
{
	dont-cache collar;
	dont-cache doora1;
	dont-cache doora2;
	dont-cache doorb1;
	dont-cache doorb2;
	dont-cache doorb3;
	dont-cache doorb4;
	dont-cache doorb5;
	dont-cache doorb6;
	dont-cache lnchpad;
	dont-cache missile;
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
	cache collar;
	cache doora1;
	cache doora2;
	cache doorb1;
	cache doorb2;
	cache doorb3;
	cache doorb4;
	cache doorb5;
	cache doorb6;
	cache lnchpad;
	cache missile;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from motor;
	hide missile;
	gun_1 = base;
	sleep 2000;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = fp;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode collar type NOHEATCLOUD;
		explode doora1 type NOHEATCLOUD;
		explode doora2 type NOHEATCLOUD;
		explode doorb1 type NOHEATCLOUD;
		explode doorb2 type NOHEATCLOUD;
		explode doorb3 type NOHEATCLOUD;
		explode doorb4 type NOHEATCLOUD;
		explode doorb5 type NOHEATCLOUD;
		explode doorb6 type NOHEATCLOUD;
		explode lnchpad type NOHEATCLOUD;
		explode missile type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode collar type NOHEATCLOUD | SHATTER;
		explode doora1 type NOHEATCLOUD | FALL;
		explode doora2 type NOHEATCLOUD | FALL;
		explode doorb1 type NOHEATCLOUD | FALL;
		explode doorb2 type NOHEATCLOUD | FALL;
		explode doorb3 type NOHEATCLOUD | FALL;
		explode doorb4 type NOHEATCLOUD | FALL;
		explode doorb5 type NOHEATCLOUD | FALL;
		explode doorb6 type NOHEATCLOUD | FALL;
		explode lnchpad type NOHEATCLOUD;
		explode missile type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode collar type NOHEATCLOUD | SHATTER;
		explode doora1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doora2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doorb1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doorb2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doorb3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doorb4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doorb5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doorb6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lnchpad type NOHEATCLOUD;
		explode missile type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode collar type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode doora1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doora2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doorb1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doorb2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doorb3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doorb4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doorb5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doorb6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lnchpad type NOHEATCLOUD;
	explode missile type NOHEATCLOUD;
	return (corpsetype);
}
