#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, flare1, turret, sleeve, barrel1, barrel2, flare2,
       p, p2;

static-var  Static_Var_1, restore_delay, gun_1, bAiming, Static_Var_5,
            Static_Var_6, Static_Var_7, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide p;
			explode p type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_6 == 0 )
		{
			Static_Var_6 = 1;
			hide p;
			explode p type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 35 )
	{
		if( Static_Var_7 == 0 )
		{
			Static_Var_7 = 1;
			hide p;
			explode p type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 40 )
		{
			if( Static_Var_7 == 1 )
			{
				Static_Var_7 = 0;
				show p;
			}
		}
		if( healthpercent >= 60 )
		{
			if( Static_Var_6 == 1 )
			{
				Static_Var_6 = 0;
				show p;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_5 == 1 )
			{
				Static_Var_5 = 0;
				show p;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	set ARMORED to 0;
	move turret to y-axis [0.000000] speed [5.000000];
	wait-for-move turret along y-axis;
	move barrel1 to z-axis [0.000000] speed [6.000000];
	move barrel2 to z-axis [0.000000] speed [6.000000];
	wait-for-move barrel1 along y-axis;
}

deactivatescr()
{
	move barrel1 to z-axis [-8.000000] speed [10.000000];
	move barrel2 to z-axis [-8.000000] speed [10.000000];
	wait-for-move barrel1 along z-axis;
	move turret to y-axis [-5.800000] speed [5.000000];
	wait-for-move turret along y-axis;
	sleep 1000;
	set ARMORED to 1;
}

Go()
{
	dont-cache sleeve;
	dont-cache turret;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache turret;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	if( bAiming == 0 )
	{
		turn turret to y-axis <0.000000> speed <80.000000>;
	}
	if( bAiming == 1 )
	{
		turn turret to y-axis <180.000000> speed <80.000000>;
	}
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	wait-for-turn sleeve around x-axis;
	start-script RequestState(1);
}

Create()
{
	dont-cache barrel2;
	dont-cache barrel1;
	dont-shade sleeve;
	dont-shade turret;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache p2;
	dont-cache p;
	hide flare1;
	hide flare2;
	Static_Var_1 = 1;
	gun_1 = base;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	if( heading < 49140 AND heading > 16380 )
	{
		bAiming = TRUE;
	}
	if( heading > 49140 OR heading < 16380 )
	{
		bAiming = FALSE;
	}
	turn turret to y-axis heading speed <80.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-3.000000] speed [500.000000];
		show flare1;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [5.000000];
		hide flare1;
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-3.000000] speed [500.000000];
		show flare2;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [5.000000];
		hide flare2;
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel1 type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode p type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode body type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD | FALL;
		explode sleeve type NOHEATCLOUD | FALL;
		explode barrel2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode turret type NOHEATCLOUD | SHATTER;
		explode body type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode p type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 4;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD;
	explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD;
	explode turret type NOHEATCLOUD;
	explode barrel1 type NOHEATCLOUD;
	return (corpsetype);
}
