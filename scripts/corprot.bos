#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, bassin, koc, lthigh, lrotule, lleg, lfoot, rthigh,
       rrotule, rleg, rfoot, axe, torso, head, pivot, lshould,
       luparm, larm, lhand, rshould, ruparm, rarm, rhand, gun,
       clip, barrel, flare, shell;

static-var  Static_Var_1, gun_1, bMoving, bAiming, Static_Var_5,
            restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


walk()
{
	turn koc to y-axis <-3.000000> speed <20.000000>;
	turn lthigh to x-axis <-30.005495> speed <225.000000>;
	turn lfoot to x-axis <12.000000> speed <100.000000>;
	turn torso to y-axis <5.000000> speed <20.000000>;
	turn ruparm to x-axis <-25.005495> speed <90.000000>;
	turn rhand to x-axis <5.000000> speed <20.000000>;
	turn luparm to x-axis <25.005495> speed <90.000000>;
	turn larm to x-axis <0.000000> speed <50.000000>;
	turn lhand to x-axis <25.005495> speed <50.000000>;
	sleep 450;
	move lleg to y-axis [-1.000000] speed [15.000000];
	turn lfoot to x-axis <13.000000> speed <100.000000>;
	turn lleg to x-axis <20.000000> speed <700.000000>;
	sleep 50;
	turn ruparm to x-axis <0.000000> speed <90.000000>;
	turn rhand to x-axis <0.000000> speed <20.000000>;
	turn luparm to x-axis <0.000000> speed <90.000000>;
	turn larm to x-axis <0.000000> speed <50.000000>;
	turn lhand to x-axis <0.000000> speed <50.000000>;
	turn koc to y-axis <0.000000> speed <20.000000>;
	turn lthigh to x-axis <0.000000> speed <150.000000>;
	turn lfoot to x-axis <0.000000> speed <150.000000>;
	turn lleg to x-axis <0.000000> speed <20.000000>;
	turn torso to y-axis <0.000000> speed <20.000000>;
	sleep 50;
	turn ruparm to x-axis <25.005495> speed <90.000000>;
	turn rhand to x-axis <-5.000000> speed <20.000000>;
	turn luparm to x-axis <-25.005495> speed <90.000000>;
	turn lhand to x-axis <-25.005495> speed <50.000000>;
	turn larm to x-axis <-25.005495> speed <50.000000>;
	turn koc to y-axis <3.000000> speed <20.000000>;
	turn lthigh to x-axis <60.005495> speed <140.000000>;
	turn lfoot to x-axis <-40.005495> speed <150.000000>;
	turn lleg to x-axis <-20.000000> speed <50.000000>;
	turn torso to y-axis <-5.000000> speed <20.000000>;
	turn rthigh to x-axis <-30.005495> speed <225.000000>;
	turn rfoot to x-axis <12.000000> speed <100.000000>;
	sleep 100;
	move lleg to y-axis [0.000000] speed [5.000000];
	sleep 350;
	move rleg to y-axis [-1.000000] speed [15.000000];
	turn rfoot to x-axis <13.000000> speed <100.000000>;
	turn rleg to x-axis <20.000000> speed <700.000000>;
	sleep 50;
	turn ruparm to x-axis <0.000000> speed <90.000000>;
	turn rhand to x-axis <0.000000> speed <20.000000>;
	turn luparm to x-axis <0.000000> speed <90.000000>;
	turn lhand to x-axis <0.000000> speed <50.000000>;
	turn larm to x-axis <0.000000> speed <50.000000>;
	turn koc to y-axis <0.000000> speed <20.000000>;
	turn rthigh to x-axis <0.000000> speed <150.000000>;
	turn rfoot to x-axis <0.000000> speed <150.000000>;
	turn rleg to x-axis <0.000000> speed <20.000000>;
	turn torso to y-axis <0.000000> speed <20.000000>;
	sleep 50;
	turn ruparm to x-axis <-25.005495> speed <90.000000>;
	turn rhand to x-axis <5.000000> speed <20.000000>;
	turn luparm to x-axis <25.005495> speed <90.000000>;
	turn lhand to x-axis <25.005495> speed <50.000000>;
	turn larm to x-axis <0.000000> speed <50.000000>;
	turn koc to y-axis <-3.000000> speed <20.000000>;
	turn rthigh to x-axis <60.005495> speed <140.000000>;
	turn rfoot to x-axis <-40.005495> speed <150.000000>;
	turn rleg to x-axis <-20.000000> speed <50.000000>;
	turn torso to y-axis <5.000000> speed <20.000000>;
	sleep 100;
	move rleg to y-axis [0.000000] speed [5.000000];
	sleep 50;
	turn ruparm to x-axis <0.000000> speed <90.000000>;
	turn rhand to x-axis <0.000000> speed <20.000000>;
	turn luparm to x-axis <0.000000> speed <90.000000>;
	turn larm to x-axis <0.000000> speed <50.000000>;
	turn lhand to x-axis <0.000000> speed <50.000000>;
	turn koc to y-axis <0.000000> speed <20.000000>;
	turn lthigh to x-axis <0.000000> speed <150.000000>;
	turn lfoot to x-axis <0.000000> speed <150.000000>;
	turn lleg to x-axis <0.000000> speed <20.000000>;
	turn torso to y-axis <0.000000> speed <20.000000>;
	move rleg to y-axis [0.000000] speed [15.000000];
	turn rfoot to x-axis <0.000000> speed <100.000000>;
	turn rleg to x-axis <0.000000> speed <700.000000>;
}

walklegs()
{
	turn koc to y-axis <-3.000000> speed <20.000000>;
	turn lthigh to x-axis <-30.005495> speed <225.000000>;
	turn lfoot to x-axis <12.000000> speed <100.000000>;
	sleep 450;
	move lleg to y-axis [-1.000000] speed [15.000000];
	turn lfoot to x-axis <13.000000> speed <100.000000>;
	turn lleg to x-axis <20.000000> speed <700.000000>;
	sleep 50;
	turn koc to y-axis <0.000000> speed <20.000000>;
	turn lthigh to x-axis <0.000000> speed <150.000000>;
	turn lfoot to x-axis <0.000000> speed <150.000000>;
	turn lleg to x-axis <0.000000> speed <20.000000>;
	sleep 50;
	turn koc to y-axis <3.000000> speed <20.000000>;
	turn lthigh to x-axis <60.005495> speed <140.000000>;
	turn lfoot to x-axis <-40.005495> speed <150.000000>;
	turn lleg to x-axis <-20.000000> speed <50.000000>;
	turn rthigh to x-axis <-30.005495> speed <225.000000>;
	turn rfoot to x-axis <12.000000> speed <100.000000>;
	sleep 100;
	move lleg to y-axis [0.000000] speed [5.000000];
	sleep 350;
	move rleg to y-axis [-1.000000] speed [15.000000];
	turn rfoot to x-axis <13.000000> speed <100.000000>;
	turn rleg to x-axis <20.000000> speed <700.000000>;
	sleep 50;
	turn koc to y-axis <0.000000> speed <20.000000>;
	turn rthigh to x-axis <0.000000> speed <150.000000>;
	turn rfoot to x-axis <0.000000> speed <150.000000>;
	turn rleg to x-axis <0.000000> speed <20.000000>;
	sleep 50;
	turn koc to y-axis <-3.000000> speed <20.000000>;
	turn rthigh to x-axis <60.005495> speed <140.000000>;
	turn rfoot to x-axis <-40.005495> speed <150.000000>;
	turn rleg to x-axis <-20.000000> speed <50.000000>;
	sleep 100;
	move rleg to y-axis [0.000000] speed [5.000000];
	sleep 50;
	turn koc to y-axis <0.000000> speed <20.000000>;
	turn lthigh to x-axis <0.000000> speed <150.000000>;
	turn lfoot to x-axis <0.000000> speed <150.000000>;
	turn lleg to x-axis <0.000000> speed <20.000000>;
	move rleg to y-axis [0.000000] speed [15.000000];
	turn rfoot to x-axis <0.000000> speed <100.000000>;
	turn rleg to x-axis <0.000000> speed <700.000000>;
}

ready2()
{
	turn lshould to z-axis <30.005495> speed <15.000000>;
	turn pivot to x-axis <-90.016484> speed <150.000000>;
	turn rhand to y-axis <90.016484> speed <40.000000>;
	move barrel to y-axis [-7.000000] speed [8.000000];
	turn lhand to y-axis <45.005495> speed <35.000000>;
	sleep 200;
	turn head to z-axis <-25.005495> speed <13.000000>;
	wait-for-turn head around z-axis;
	wait-for-turn rhand around y-axis;
}

holster()
{
	turn head to z-axis <0.000000> speed <40.000000>;
	turn lshould to z-axis <0.000000> speed <80.000000>;
	turn pivot to x-axis <0.000000> speed <150.000000>;
	turn torso to y-axis <0.000000> speed <80.000000>;
	turn rhand to y-axis <0.000000> speed <120.000000>;
	move barrel to y-axis [0.000000] speed [40.000000];
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script ready2();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script holster();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_5 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_5 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_5 = 1;
			if( justmoved )
			{
				turn rthigh to x-axis <0.000000> speed <140.000000>;
				turn head to z-axis <0.000000> speed <20.000000>;
				turn rshould to z-axis <0.000000> speed <40.000000>;
				turn torso to y-axis <0.000000> speed <40.000000>;
				turn rhand to x-axis <0.000000> speed <80.000000>;
				if( !aiming )
				{
					turn rthigh to x-axis <0.000000> speed <140.000000>;
					turn head to z-axis <0.000000> speed <20.000000>;
					turn rshould to z-axis <0.000000> speed <40.000000>;
					turn torso to y-axis <0.000000> speed <40.000000>;
					turn rhand to x-axis <0.000000> speed <80.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	turn flare to x-axis <90.000000> now;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_5 = 1;
	gun_1 = base;
	Static_Var_1 = 0;
	hide base;
	hide flare;
	spin flare around y-axis speed <100.016484>;
	restore_delay = 2000;
	call-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	turn axe to y-axis <0.000000> speed <200.000000>;
	turn axe to x-axis <0.000000> speed <200.000000>;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn axe to y-axis heading speed <150.000000>;
	turn axe to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn axe around y-axis;
	wait-for-turn axe around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from flare;
		turn head to x-axis <-7.000000> speed <150.000000>;
		move barrel to y-axis [-2.000000] speed [200.000000];
		sleep 20;
		move pivot to z-axis [-1.000000] speed [40.000000];
		sleep 80;
		turn head to x-axis <0.000000> speed <30.000000>;
		move pivot to z-axis [0.000000] speed [6.000000];
		move barrel to y-axis [-7.000000] speed [20.000000];
		turn clip to x-axis <-12.000000> speed <50.000000>;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from flare;
		turn head to x-axis <-7.000000> speed <150.000000>;
		move barrel to y-axis [-2.000000] speed [200.000000];
		sleep 20;
		move pivot to z-axis [-1.000000] speed [40.000000];
		sleep 80;
		turn head to x-axis <0.000000> speed <30.000000>;
		move pivot to z-axis [0.000000] speed [6.000000];
		move barrel to y-axis [-7.000000] speed [20.000000];
		turn clip to x-axis <-24.005495> speed <50.000000>;
	}
	if( gun_1 == 2 )
	{
		emit-sfx 1024 + 0 from flare;
		turn head to x-axis <-7.000000> speed <150.000000>;
		move barrel to y-axis [-2.000000] speed [200.000000];
		sleep 20;
		move pivot to z-axis [-1.000000] speed [40.000000];
		sleep 80;
		turn head to x-axis <0.000000> speed <30.000000>;
		move pivot to z-axis [0.000000] speed [6.000000];
		move barrel to y-axis [-7.000000] speed [20.000000];
		turn clip to x-axis <-36.005495> speed <50.000000>;
	}
	if( gun_1 == 3 )
	{
		emit-sfx 1024 + 0 from flare;
		turn head to x-axis <-7.000000> speed <150.000000>;
		move barrel to y-axis [-2.000000] speed [200.000000];
		sleep 20;
		move pivot to z-axis [-1.000000] speed [40.000000];
		sleep 80;
		turn head to x-axis <0.000000> speed <30.000000>;
		move pivot to z-axis [0.000000] speed [6.000000];
		move barrel to y-axis [-7.000000] speed [20.000000];
		turn clip to x-axis <-48.005495> speed <50.000000>;
	}
	if( gun_1 == 4 )
	{
		emit-sfx 1024 + 0 from flare;
		turn head to x-axis <-7.000000> speed <150.000000>;
		move barrel to y-axis [-2.000000] speed [200.000000];
		sleep 20;
		move pivot to z-axis [-1.000000] speed [40.000000];
		sleep 80;
		turn head to x-axis <0.000000> speed <30.000000>;
		move pivot to z-axis [0.000000] speed [6.000000];
		move barrel to y-axis [-7.000000] speed [20.000000];
		turn clip to x-axis <-59.005495> speed <50.000000>;
	}
	if( gun_1 == 5 )
	{
		emit-sfx 1024 + 0 from flare;
		turn head to x-axis <-7.000000> speed <150.000000>;
		move barrel to y-axis [-2.000000] speed [200.000000];
		sleep 20;
		move pivot to z-axis [-1.000000] speed [40.000000];
		sleep 80;
		turn head to x-axis <0.000000> speed <30.000000>;
		move pivot to z-axis [0.000000] speed [6.000000];
		move barrel to y-axis [-7.000000] speed [20.000000];
		turn clip to x-axis <0.000000> speed <200.000000>;
		explode shell type NOHEATCLOUD | EXPLODE_ON_HIT;
		sleep 20;
		explode shell type NOHEATCLOUD | EXPLODE_ON_HIT;
		sleep 20;
		explode shell type NOHEATCLOUD | EXPLODE_ON_HIT;
		sleep 20;
		explode shell type NOHEATCLOUD | EXPLODE_ON_HIT;
		sleep 20;
		explode shell type NOHEATCLOUD | EXPLODE_ON_HIT;
	}
	++gun_1;
	if( gun_1 == 6 )
	{
		gun_1 = bassin;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = axe;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromSecondary(piecenum)
{
	piecenum = axe;
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

FireSecondary()
{
}

AimSecondary(heading, pitch)
{
	while( !bAiming )
	{
		sleep 200;
	}
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode bassin type NOHEATCLOUD;
		explode koc type NOHEATCLOUD;
		explode lthigh type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD;
		explode lrotule type NOHEATCLOUD;
		explode rrotule type NOHEATCLOUD;
		explode lfoot type NOHEATCLOUD;
		explode rthigh type NOHEATCLOUD;
		explode rleg type NOHEATCLOUD;
		explode rfoot type NOHEATCLOUD;
		explode torso type NOHEATCLOUD;
		explode head type NOHEATCLOUD;
		explode rshould type NOHEATCLOUD;
		explode ruparm type NOHEATCLOUD;
		explode rarm type NOHEATCLOUD;
		explode rhand type NOHEATCLOUD;
		explode lshould type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode pivot type NOHEATCLOUD;
		explode axe type NOHEATCLOUD;
		explode larm type NOHEATCLOUD;
		explode flare type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD | FALL | SMOKE;
		explode lhand type NOHEATCLOUD | FALL;
		explode clip type NOHEATCLOUD | SHATTER;
		explode shell type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode bassin type NOHEATCLOUD;
		explode koc type NOHEATCLOUD | FALL;
		explode lthigh type NOHEATCLOUD | FALL;
		explode lleg type NOHEATCLOUD | FALL;
		explode lrotule type NOHEATCLOUD;
		explode rrotule type NOHEATCLOUD;
		explode lfoot type NOHEATCLOUD | FALL;
		explode rthigh type NOHEATCLOUD | FALL;
		explode rleg type NOHEATCLOUD | FALL;
		explode rfoot type NOHEATCLOUD | FALL;
		explode torso type NOHEATCLOUD | SHATTER;
		explode head type NOHEATCLOUD | SHATTER;
		explode rshould type NOHEATCLOUD | FALL | FIRE;
		explode ruparm type NOHEATCLOUD | FALL;
		explode rarm type NOHEATCLOUD | FALL;
		explode rhand type NOHEATCLOUD | FALL;
		explode lshould type NOHEATCLOUD | FALL;
		explode luparm type NOHEATCLOUD | FALL;
		explode larm type NOHEATCLOUD | FALL;
		explode lhand type NOHEATCLOUD | FALL;
		explode gun type NOHEATCLOUD | FALL | SMOKE;
		explode pivot type NOHEATCLOUD;
		explode flare type NOHEATCLOUD;
		explode axe type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD | FALL | SMOKE;
		explode clip type NOHEATCLOUD | SHATTER;
		explode shell type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode bassin type NOHEATCLOUD;
		explode koc type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lrotule type NOHEATCLOUD;
		explode rrotule type NOHEATCLOUD;
		explode lfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rthigh type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rfoot type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode torso type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode head type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rshould type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lshould type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pivot type NOHEATCLOUD;
		explode axe type NOHEATCLOUD;
		explode flare type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD | FALL | SMOKE;
		explode clip type NOHEATCLOUD | SHATTER;
		explode shell type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode koc type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lrotule type NOHEATCLOUD;
	explode rrotule type NOHEATCLOUD;
	explode lfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rthigh type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rfoot type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode torso type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode head type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rshould type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gun type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lshould type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pivot type NOHEATCLOUD;
	explode axe type NOHEATCLOUD;
	explode flare type NOHEATCLOUD;
	explode barrel type NOHEATCLOUD | FALL | SMOKE;
	explode clip type NOHEATCLOUD | SHATTER;
	explode shell type NOHEATCLOUD | SHATTER;
	return (corpsetype);
}
