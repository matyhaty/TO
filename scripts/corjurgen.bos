#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, bassin, lthigh, lleg, lfoot, l1, l2, rthigh,
       rleg, rfoot, r1, r2, torso, pivot, lshould, luparm,
       kick, larm, lhand, lgun, lflare, rshould, ruparm, rarm,
       rhand, skuttle, axe, head;

static-var  Static_Var_1, Static_Var_2, bAiming, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

WalkAnimation()
{
	while( TRUE )
	{
		if( Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn torso to y-axis <-10.000000> speed <40.000000>;
				turn lshould to x-axis <-30.005495> speed <95.000000>;
			}
			move torso to y-axis [1.000000] speed [25.000000];
			turn torso to x-axis <15.000000> speed <40.000000>;
			turn bassin to y-axis <10.000000> speed <30.000000>;
			turn rshould to x-axis <50.005495> speed <125.000000>;
			turn rthigh to x-axis <-60.005495> speed <180.000000>;
			turn rleg to x-axis <20.000000> speed <55.000000>;
			turn r1 to x-axis <-50.005495> speed <200.000000>;
			turn r2 to x-axis <-30.005495> speed <200.000000>;
			turn lthigh to x-axis <30.005495> speed <110.000000>;
			turn lleg to x-axis <30.005495> speed <100.000000>;
			move lleg to y-axis [1.000000] speed [25.000000];
			sleep 300;
		}
		if( Static_Var_1 )
		{
			turn rshould to x-axis <0.000000> speed <60.000000>;
			turn rarm to x-axis <0.000000> speed <50.000000>;
			sleep 100;
		}
		if( Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn torso to y-axis <0.000000> speed <40.000000>;
			}
			move torso to y-axis [0.000000] speed [25.000000];
			turn torso to x-axis <0.000000> speed <40.000000>;
			turn bassin to y-axis <0.000000> speed <30.000000>;
			turn r1 to x-axis <0.000000> speed <200.000000>;
			turn r2 to x-axis <0.000000> speed <200.000000>;
			move rleg to y-axis [-1.000000] speed [25.000000];
			turn rleg to x-axis <45.005495> speed <250.000000>;
			turn lthigh to x-axis <0.000000> speed <30.000000>;
			turn lleg to x-axis <0.000000> speed <45.000000>;
			move lleg to y-axis [0.000000] speed [25.000000];
			sleep 200;
		}
		if( Static_Var_1 )
		{
			turn lshould to x-axis <0.000000> speed <60.000000>;
			sleep 40;
		}
		if( Static_Var_1 )
		{
			move rleg to y-axis [0.000000] speed [10.000000];
			turn rthigh to x-axis <0.000000> speed <100.000000>;
			move lleg to y-axis [0.000000] speed [10.000000];
			sleep 60;
		}
		if( Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn lshould to x-axis <50.005495> speed <95.000000>;
				turn larm to x-axis <-25.005495> speed <50.000000>;
			}
			sleep 100;
		}
		if( Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn larm to x-axis <0.000000> speed <50.000000>;
			}
			sleep 100;
		}
		if( Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn rshould to x-axis <-30.005495> speed <95.000000>;
			}
			sleep 40;
		}
		if( Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn torso to y-axis <10.000000> speed <40.000000>;
				turn lshould to x-axis <50.005495> speed <125.000000>;
			}
			move torso to y-axis [1.000000] speed [25.000000];
			turn torso to x-axis <15.000000> speed <40.000000>;
			turn bassin to y-axis <-10.000000> speed <30.000000>;
			turn rthigh to x-axis <30.005495> speed <110.000000>;
			turn rleg to x-axis <30.005495> speed <200.000000>;
			move rleg to y-axis [1.000000] speed [25.000000];
			turn lthigh to x-axis <-60.005495> speed <180.000000>;
			turn lleg to x-axis <20.000000> speed <55.000000>;
			turn l1 to x-axis <-50.005495> speed <200.000000>;
			turn l2 to x-axis <-30.005495> speed <200.000000>;
			sleep 300;
		}
		if( Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn lshould to x-axis <0.000000> speed <60.000000>;
			}
			sleep 200;
		}
		if( Static_Var_1 )
		{
			turn rthigh to x-axis <0.000000> speed <30.000000>;
			turn rleg to x-axis <0.000000> speed <45.000000>;
			turn l1 to x-axis <0.000000> speed <200.000000>;
			turn l2 to x-axis <0.000000> speed <200.000000>;
			move lleg to y-axis [-1.000000] speed [25.000000];
			turn lleg to x-axis <45.005495> speed <250.000000>;
			sleep 46;
		}
		if( Static_Var_1 )
		{
			move rleg to y-axis [0.000000] speed [10.000000];
			move torso to y-axis [0.000000] speed [25.000000];
			turn torso to x-axis <0.000000> speed <40.000000>;
			sleep 17;
		}
		if( Static_Var_1 )
		{
			turn rshould to x-axis <0.000000> speed <60.000000>;
			sleep 97;
		}
		if( Static_Var_1 )
		{
			turn rshould to x-axis <50.005495> speed <95.000000>;
			turn rarm to x-axis <-25.005495> speed <50.000000>;
			sleep 100;
		}
		if( Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn torso to y-axis <0.000000> speed <40.000000>;
			}
			turn bassin to y-axis <0.000000> speed <30.000000>;
			turn rshould to x-axis <0.000000> speed <95.000000>;
			turn rarm to x-axis <0.000000> speed <50.000000>;
			move lleg to y-axis [0.000000] speed [10.000000];
			turn lleg to x-axis <0.000000> speed <125.000000>;
			turn lthigh to x-axis <0.000000> speed <200.000000>;
			sleep 300;
		}
		if( !Static_Var_1 )
		{
			if( !Static_Var_2 )
			{
				turn torso to y-axis <0.000000> speed <100.000000>;
				turn lshould to x-axis <0.000000> speed <200.000000>;
				turn luparm to y-axis <0.000000> speed <200.000000>;
				turn larm to x-axis <0.000000> speed <200.000000>;
			}
			turn head to y-axis <0.000000> speed <100.000000>;
			turn head to x-axis <0.000000> speed <100.000000>;
			turn torso to x-axis <0.000000> speed <100.000000>;
			move torso to y-axis [0.000000] speed [25.000000];
			turn rshould to x-axis <0.000000> speed <50.000000>;
			turn ruparm to y-axis <0.000000> speed <50.000000>;
			turn rarm to x-axis <0.000000> speed <50.000000>;
			turn rthigh to x-axis <0.000000> speed <120.000000>;
			turn rleg to x-axis <0.000000> speed <120.000000>;
			move rleg to y-axis [0.000000] speed [20.000000];
			turn r1 to x-axis <0.000000> speed <120.000000>;
			turn r2 to x-axis <0.000000> speed <120.000000>;
			turn lthigh to x-axis <0.000000> speed <110.000000>;
			turn lleg to x-axis <0.000000> speed <120.000000>;
			move lleg to y-axis [0.000000] speed [20.000000];
		}
		while( !Static_Var_1 )
		{
			sleep 50;
		}
	}
}

MoveCheck(Func_Var_1)
{
	sleep 200;
	Func_Var_1 = get PIECE_XZ(base);
	while( TRUE )
	{
		while( Func_Var_1 == get PIECE_XZ(base) )
		{
			Static_Var_1 = 0;
			sleep 200;
		}
		while( Func_Var_1 != get PIECE_XZ(base) )
		{
			Func_Var_1 = get PIECE_XZ(base);
			Static_Var_1 = 1;
			signal SIG_AIM;
			bAiming = FALSE;
			sleep 500;
		}
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_5 = 0;
	bAiming = FALSE;
	hide base;
	hide skuttle;
	hide lflare;
	start-script MoveCheck();
	start-script SmokeUnit();
	start-script WalkAnimation();
}

RestoreAfterSkuttleKick()
{
	sleep 2000;
	hide skuttle;
	turn lthigh to x-axis <0.000000> speed <40.000000>;
	turn rarm to x-axis <0.000000> speed <120.000000>;
	turn ruparm to y-axis <0.000000> speed <120.000000>;
	turn rshould to x-axis <0.000000> speed <90.000000>;
	bAiming = FALSE;
	Static_Var_5 = 0;
}

ReloadPrimary()
{
	sleep 4050;
	Static_Var_5 = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( Static_Var_1 OR Static_Var_5 OR pitch < 910 OR pitch > 15473 )
	{
		return (0);
	}
	if( bAiming <= 1 )
	{
		bAiming = TRUE;
		turn torso to y-axis heading speed <40.000000>;
		turn rshould to x-axis <50.000000> speed <70.000000>;
		turn ruparm to y-axis <80.000000> speed <70.000000>;
		turn rarm to x-axis <-70.000000> speed <70.000000>;
		wait-for-turn rshould around x-axis;
		wait-for-turn ruparm around y-axis;
		wait-for-turn rarm around x-axis;
		bAiming = TRUE;
	}
	if( bAiming == 2 )
	{
		move skuttle to x-axis [0.000000] now;
		move skuttle to y-axis [0.000000] now;
		move skuttle to z-axis [0.000000] now;
		show skuttle;
		turn rarm to x-axis <15.000000> speed <230.000000>;
		wait-for-turn rarm around x-axis;
		bAiming = TRUE;
	}
	if( bAiming == 3 )
	{
		turn rshould to x-axis <0.000000> speed <70.000000>;
		turn ruparm to y-axis <85.000000> speed <70.000000>;
		turn lthigh to x-axis <50.000000> speed <40.000000>;
		wait-for-turn rshould around x-axis;
		wait-for-turn ruparm around y-axis;
		bAiming = TRUE;
	}
	if( bAiming == 4 )
	{
		turn rshould to x-axis <-50.000000> speed <90.000000>;
		turn ruparm to y-axis <90.000000> speed <90.000000>;
		turn rarm to x-axis <-70.000000> speed <90.000000>;
		wait-for-turn rshould around x-axis;
		wait-for-turn ruparm around y-axis;
		wait-for-turn rarm around x-axis;
		bAiming = TRUE;
	}
	if( bAiming == 5 )
	{
		move skuttle to x-axis [-9.000000] speed [27.000000];
		move skuttle to y-axis [-6.500000] speed [19.500000];
		move skuttle to z-axis [-7.500000] speed [22.500000];
		turn lthigh to x-axis <-10.000000> speed <180.000000>;
		wait-for-move skuttle along x-axis;
		wait-for-turn lthigh around x-axis;
		bAiming = TRUE;
	}
	start-script RestoreAfterSkuttleKick();
	return (1);
}

FirePrimary()
{
	hide skuttle;
	bAiming = FALSE;
	turn lthigh to x-axis <0.000000> speed <40.000000>;
	turn rarm to x-axis <0.000000> speed <120.000000>;
	turn ruparm to y-axis <0.000000> speed <120.000000>;
	turn rshould to x-axis <0.000000> speed <90.000000>;
	Static_Var_5 = 1;
	start-script ReloadPrimary();
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

QueryPrimary(piecenum)
{
	piecenum = kick;
}

RestoreHandGunAfterDelay()
{
	sleep 4000;
	Static_Var_2 = 0;
	turn torso to y-axis <0.000000> speed <150.000000>;
	turn lshould to x-axis <0.000000> speed <40.000000>;
	turn larm to y-axis <0.000000> speed <40.000000>;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( bAiming )
	{
		return (0);
	}
	Static_Var_2 = 1;
	turn torso to y-axis heading speed <150.000000>;
	turn lshould to x-axis <-45.000000> - pitch speed <150.000000>;
	turn larm to x-axis <-41.000000> speed <150.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn lshould around x-axis;
	start-script RestoreHandGunAfterDelay();
	return (1);
}

FireSecondary()
{
	show lflare;
	sleep 120;
	hide lflare;
	turn lhand to x-axis <-30.000000> speed <500.000000>;
	wait-for-turn lhand around x-axis;
	turn lhand to x-axis <0.000000> speed <250.000000>;
	wait-for-turn lhand around x-axis;
}

AimFromSecondary(piecenum)
{
	piecenum = torso;
}

QuerySecondary(piecenum)
{
	piecenum = lflare;
}

SweetSpot(piecenum)
{
	piecenum = r1;
}

RestoreAfterBuilding()
{
	sleep 2000;
	turn torso to y-axis <0.000000> speed <120.000000>;
	turn rshould to x-axis <0.000000> speed <60.000000>;
	Static_Var_2 = 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = rhand;
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	Static_Var_2 = 1;
	turn torso to y-axis Func_Var_1 speed <150.000000>;
	turn rshould to x-axis Func_Var_2 speed <90.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn rshould around x-axis;
	set INBUILDSTANCE to 1;
}

TargetCleared(Func_Var_1)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script RestoreAfterBuilding();
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide skuttle;
	hide base;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode bassin type NOHEATCLOUD;
		explode lthigh type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD;
		explode lfoot type NOHEATCLOUD;
		explode l1 type NOHEATCLOUD;
		explode l2 type NOHEATCLOUD;
		explode rthigh type NOHEATCLOUD;
		explode rleg type NOHEATCLOUD;
		explode rfoot type NOHEATCLOUD;
		explode r1 type NOHEATCLOUD;
		explode r2 type NOHEATCLOUD;
		explode torso type NOHEATCLOUD;
		explode head type NOHEATCLOUD;
		explode rshould type NOHEATCLOUD;
		explode ruparm type NOHEATCLOUD;
		explode rarm type NOHEATCLOUD;
		explode rhand type NOHEATCLOUD;
		explode skuttle type NOHEATCLOUD;
		explode lshould type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD;
		explode larm type NOHEATCLOUD;
		explode lhand type NOHEATCLOUD;
		explode lgun type NOHEATCLOUD;
		explode lflare type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode bassin type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode l1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode l2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode r1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode r2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode torso type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode head type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pivot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rshould type NOHEATCLOUD | EXPLODE_ON_HIT;
		explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode skuttle type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lshould type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lflare type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode bassin type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode l1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode l2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode r1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode r2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode torso type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode head type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pivot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rshould type NOHEATCLOUD | EXPLODE_ON_HIT;
		explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode skuttle type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lshould type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lflare type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode bassin type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode l1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode l2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode r1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode r2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode torso type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode head type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pivot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rshould type NOHEATCLOUD | EXPLODE_ON_HIT;
	explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode skuttle type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lshould type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lflare type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
