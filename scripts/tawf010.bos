#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flash1, flash2, base, basemod, turret, turretmod, guns, gun1,
       gun2, lflare1, launcher1, shell1, gunsmod;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	hide shell1;
	hide lflare1;
	hide guns;
	hide turret;
	hide flash1;
	hide flash2;
	dont-cache flash1;
	dont-cache flash2;
	dont-cache gunsmod;
	cache gunsmod;
	gun_1 = flash1;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <170.000000>;
	turn guns to x-axis <0.000000> - pitch speed <170.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn guns around x-axis;
	return (1);
}

FirePrimary()
{
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	piecenum = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = !gun_1;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret to y-axis heading speed <170.000000>;
	turn guns to x-axis <0.000000> - pitch speed <170.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn guns around x-axis;
	return (1);
}

FireSecondary()
{
	move launcher1 to z-axis [-3.000000] now;
	show lflare1;
	explode shell1 type NOHEATCLOUD | FALL | SMOKE;
	sleep 300;
	hide lflare1;
	move launcher1 to z-axis [0.000000] speed [1.000000];
}

QuerySecondary(piecenum)
{
	piecenum = lflare1;
}

AimFromSecondary(piecenum)
{
	piecenum = guns;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flash1;
	hide flash2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode flash1 type NOHEATCLOUD;
		explode flash2 type NOHEATCLOUD;
		explode gunsmod type NOHEATCLOUD;
		explode turretmod type NOHEATCLOUD;
		explode basemod type NOHEATCLOUD | SHATTER;
		explode gun1 type NOHEATCLOUD | FALL;
		explode gun2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode flash1 type NOHEATCLOUD | FALL;
		explode flash2 type NOHEATCLOUD | FALL;
		explode gunsmod type NOHEATCLOUD;
		explode turretmod type NOHEATCLOUD | SHATTER;
		explode gun1 type NOHEATCLOUD | FALL;
		explode gun2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode flash1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flash2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gunsmod type NOHEATCLOUD;
		explode turretmod type NOHEATCLOUD | SHATTER;
		explode gun1 type NOHEATCLOUD | FALL;
		explode gun2 type NOHEATCLOUD | FALL;
		explode basemod type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode flash1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flash2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gunsmod type NOHEATCLOUD;
	explode basemod type NOHEATCLOUD | SHATTER;
	explode turretmod type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
