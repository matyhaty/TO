#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, doors, door1, door2, door3, door4, plat,
       gun, flare;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	set ARMORED to 0;
	if( TRUE )
	{
		move door1 to z-axis [-5.000000] speed [80.000000];
		move door2 to x-axis [5.000000] speed [80.000000];
		move door3 to z-axis [5.000000] speed [80.000000];
		move door4 to x-axis [-5.000000] speed [80.000000];
		move doors to y-axis [-2.000000] speed [30.000000];
		wait-for-move door1 along z-axis;
	}
	if( TRUE )
	{
		move plat to y-axis [16.000000] speed [130.000000];
		move gun to y-axis [5.000000] speed [90.000000];
		wait-for-move plat along y-axis;
	}
	sleep 5;
}

deactivatescr()
{
	if( TRUE )
	{
	}
	if( TRUE )
	{
		move plat to y-axis [0.000000] speed [30.000000];
		move gun to y-axis [0.000000] speed [25.000000];
		wait-for-move plat along y-axis;
	}
	if( TRUE )
	{
		move door1 to z-axis [0.000000] speed [30.000000];
		move door2 to x-axis [0.000000] speed [30.000000];
		move door3 to z-axis [0.000000] speed [30.000000];
		move door4 to x-axis [0.000000] speed [30.000000];
		move doors to y-axis [0.000000] speed [10.000000];
		wait-for-move door1 along z-axis;
	}
	set ARMORED to 1;
}

HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide door1;
			explode door1 type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_6 == 0 )
		{
			Static_Var_6 = 1;
			hide door3;
			explode door3 type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 60 )
		{
			if( Static_Var_6 == 1 )
			{
				Static_Var_6 = 0;
				show door3;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_5 == 1 )
			{
				Static_Var_5 = 0;
				show door1;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache gun;
	dont-cache plat;
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	cache gun;
	cache plat;
	sleep 4000;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	Static_Var_1 = 0;
	dont-shade plat;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade gun;
	dont-cache flare;
	hide flare;
	restore_delay = 1000;
	start-script SmokeUnit();
}

Activate()
{
	dont-cache plat;
	dont-cache door1;
	dont-cache door2;
	dont-cache gun;
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
	cache plat;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache gun;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 500;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move gun to y-axis [5.000000] speed [500.000000];
	show flare;
	sleep 15;
	hide flare;
	move gun to y-axis [3.000000] speed [3.000000];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode plat type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode plat type NOHEATCLOUD;
		explode body type NOHEATCLOUD | SHATTER;
		explode door1 type NOHEATCLOUD | FALL;
		explode door2 type NOHEATCLOUD | FALL;
		explode gun type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode plat type NOHEATCLOUD;
		explode body type NOHEATCLOUD | SHATTER;
		explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode plat type NOHEATCLOUD;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gun type NOHEATCLOUD;
	return (corpsetype);
}
