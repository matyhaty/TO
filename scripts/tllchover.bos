#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, arm, door1, door2, spray, nano,
       wakes, wake1, wake2, wake3, wake4, wake5, wake6, wake7,
       wake8, p;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <-130.000000> speed <180.000000>;
		turn door2 to z-axis <130.000000> speed <180.000000>;
		sleep 500;
	}
	if( TRUE )
	{
		move turret to y-axis [2.000000] speed [7.000000];
		turn arm to x-axis <50.000000> speed <120.000000>;
		turn nano to x-axis <-50.000000> speed <120.000000>;
		sleep 100;
	}
	sleep 100;
}

deactivatescr()
{
	if( TRUE )
	{
		move turret to y-axis [0.000000] speed [10.000000];
		turn arm to x-axis <0.000000> speed <150.000000>;
		turn nano to x-axis <0.000000> speed <150.000000>;
		sleep 500;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <180.000000>;
		turn door2 to z-axis <0.000000> speed <180.000000>;
	}
	sleep 10;
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_2 speed <190.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <190.000000>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_2 = 0;
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1, Func_Var_2;
	Func_Var_1 = 3;
	Func_Var_2 = 4;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		if( Static_Var_1 == 3 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	start-script RequestState(0);
	signal SIG_MOVE;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_MOVE;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = spray;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode nano type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode nano type NOHEATCLOUD | FALL;
		explode body type NOHEATCLOUD;
		explode arm type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode arm type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
