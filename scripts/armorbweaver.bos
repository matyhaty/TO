#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, slider, door, forkbase, fork, leg1, leg2, leg3,
       leg4, leg5, leg6;

static-var  bMoving, Static_Var_2, Static_Var_3, Static_Var_4;

// Signal definitions
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

RequestState()
{
	while( !Static_Var_4 AND Static_Var_2 != Static_Var_3 )
	{
		Static_Var_4 = 1;
		if( Static_Var_2 AND !Static_Var_3 )
		{
			move door to y-axis [-2.000000] speed [4.000000];
			sleep 500;
			move forkbase to z-axis [5.900000] speed [5.900000];
			move slider to z-axis [-2.000000] speed [5.900000];
			sleep 1000;
			set ARMORED to 0;
			spin fork around z-axis speed <100.016484>;
			Static_Var_3 = 1;
		}
		if( !Static_Var_2 AND Static_Var_3 )
		{
			Static_Var_3 = 0;
			spin fork around z-axis speed <0.000000>;
			turn fork to z-axis <0.000000> speed <100.016484>;
			wait-for-turn fork around z-axis;
			move forkbase to z-axis [0.000000] speed [5.900000];
			move slider to z-axis [0.000000] speed [5.900000];
			sleep 1000;
			set ARMORED to 1;
			move door to y-axis [0.000000] speed [4.000000];
		}
	}
	Static_Var_4 = 0;
}

Activate()
{
	Static_Var_2 = 1;
	start-script RequestState();
}

Deactivate()
{
	Static_Var_2 = 0;
	start-script RequestState();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43.000000> now;
			turn leg1 to y-axis <0.000000> speed <218.000000>;
			turn leg1 to z-axis <0.000000> now;
			turn leg1 to z-axis <0.000000> speed <30.000000>;
			turn leg2 to z-axis <0.000000> now;
			turn leg2 to z-axis <31.000000> speed <155.000000>;
			turn leg3 to y-axis <34.000000> now;
			turn leg3 to z-axis <-31.000000> now;
			turn leg3 to z-axis <0.000000> speed <155.000000>;
			turn leg4 to y-axis <-40.000000> now;
			turn leg4 to y-axis <-39.000000> speed <0.000000>;
			turn leg4 to z-axis <-31.000000> now;
			turn leg4 to z-axis <0.000000> speed <152.000000>;
			turn leg5 to y-axis <-37.000000> now;
			turn leg5 to y-axis <0.000000> speed <185.000000>;
			turn leg5 to z-axis <0.000000> now;
			turn leg6 to y-axis <0.000000> now;
			turn leg6 to y-axis <-30.000000> speed <152.000000>;
			turn leg6 to z-axis <-45.000000> now;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <31.000000> speed <158.000000>;
			turn leg2 to y-axis <34.000000> speed <173.000000>;
			turn leg2 to z-axis <31.000000> speed <1.000000>;
			turn leg3 to y-axis <0.000000> speed <246.000000>;
			turn leg3 to z-axis <0.000000> speed <30.000000>;
			turn leg4 to y-axis <0.000000> speed <200.000000>;
			turn leg5 to z-axis <-31.000000> speed <155.000000>;
			turn leg6 to z-axis <3.000000> speed <237.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.000000> speed <279.000000>;
			turn leg1 to z-axis <31.000000> speed <30.000000>;
			turn leg2 to y-axis <34.000000> speed <20.000000>;
			turn leg2 to z-axis <0.000000> speed <152.000000>;
			turn leg3 to z-axis <31.000000> speed <158.000000>;
			turn leg4 to y-axis <0.000000> speed <30.000000>;
			turn leg4 to z-axis <-31.000000> speed <152.000000>;
			turn leg5 to y-axis <-31.000000> speed <158.000000>;
			turn leg5 to z-axis <-31.000000> speed <30.000000>;
			turn leg6 to y-axis <0.000000> speed <167.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <43.000000> speed <60.000000>;
			turn leg1 to z-axis <0.000000> speed <152.000000>;
			turn leg2 to y-axis <0.000000> speed <173.000000>;
			turn leg2 to z-axis <0.000000> speed <3.000000>;
			turn leg3 to y-axis <34.000000> speed <173.000000>;
			turn leg3 to z-axis <31.000000> speed <0.000000>;
			turn leg4 to y-axis <-40.000000> speed <197.000000>;
			turn leg4 to z-axis <-31.000000> speed <0.000000>;
			turn leg5 to y-axis <-37.000000> speed <27.000000>;
			turn leg5 to z-axis <0.000000> speed <155.000000>;
			turn leg6 to y-axis <0.000000> speed <15.000000>;
			turn leg6 to z-axis <-45.000000> speed <237.000000>;
			sleep 200;
		}
	}
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode leg6 type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD;
		explode leg2 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode fork type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD;
		explode leg4 type NOHEATCLOUD;
		explode leg5 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode leg1 type NOHEATCLOUD | FALL;
		explode leg6 type NOHEATCLOUD | FALL;
		explode fork type NOHEATCLOUD | SHATTER;
		explode leg2 type NOHEATCLOUD | FALL;
		explode leg3 type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD;
		explode leg4 type NOHEATCLOUD | FALL;
		explode leg5 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode fork type NOHEATCLOUD | SHATTER;
		explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode fork type NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
