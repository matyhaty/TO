#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, arm1, arm2, arm3, arm4, flare, barrel,
       turret, lights, box1, box2, box3, box4;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		turn arm1 to z-axis <55.005495> speed <50.005495>;
		turn arm2 to z-axis <-55.005495> speed <50.005495>;
		turn arm3 to x-axis <-55.005495> speed <50.005495>;
		turn arm4 to x-axis <55.005495> speed <50.005495>;
		turn box1 to z-axis <85.016484> speed <50.005495>;
		turn box2 to z-axis <-85.016484> speed <50.005495>;
		turn box3 to x-axis <-85.016484> speed <50.005495>;
		turn box4 to x-axis <85.016484> speed <50.005495>;
		sleep 1200;
	}
	if( TRUE )
	{
		move barrel to y-axis [8.000000] speed [5.000000];
		sleep 1000;
	}
	if( TRUE )
	{
		spin barrel around y-axis speed <10.000000>;
		sleep 250;
		spin barrel around y-axis speed <40.005495>;
		sleep 250;
		spin barrel around y-axis speed <60.005495>;
		sleep 250;
		spin barrel around y-axis speed <90.016484>;
		sleep 250;
		spin barrel around y-axis speed <120.027473>;
		sleep 250;
		spin barrel around y-axis speed <150.027473>;
		sleep 250;
		spin barrel around y-axis speed <190.038462>;
		sleep 250;
		spin barrel around y-axis speed <250.060440>;
		sleep 250;
		spin barrel around y-axis speed <370.082418>;
		sleep 250;
		spin barrel around y-axis speed <500.115385>;
		sleep 250;
	}
	sleep 500;
}

deactivatescr()
{
	if( TRUE )
	{
		spin barrel around y-axis speed <400.093407>;
		sleep 550;
		spin barrel around y-axis speed <320.071429>;
		sleep 550;
		spin barrel around y-axis speed <200.038462>;
		sleep 750;
		turn barrel to y-axis <0.000000> speed <90.016484>;
		sleep 1000;
	}
	if( TRUE )
	{
		move barrel to y-axis [0.000000] speed [5.000000];
		sleep 1000;
	}
	if( TRUE )
	{
		turn arm3 to x-axis <0.000000> speed <50.005495>;
		turn arm4 to x-axis <0.000000> speed <50.005495>;
		turn arm1 to z-axis <0.000000> speed <50.005495>;
		turn arm2 to z-axis <0.000000> speed <50.005495>;
		turn box3 to x-axis <0.000000> speed <50.005495>;
		turn box4 to x-axis <0.000000> speed <50.005495>;
		turn box1 to z-axis <0.000000> speed <50.005495>;
		turn box2 to z-axis <0.000000> speed <50.005495>;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

go()
{
	call-script activatescr();
	gun_1 = body;
}

stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	gun_1 = base;
	dont-shade turret;
	dont-shade lights;
	dont-shade arm1;
	dont-shade arm2;
	dont-shade arm3;
	dont-shade arm4;
	dont-shade box1;
	dont-shade box2;
	dont-shade box3;
	dont-shade box4;
	dont-cache flare;
	dont-cache lights;
	dont-cache arm1;
	dont-cache arm2;
	dont-cache arm3;
	dont-cache arm4;
	dont-cache barrel;
	hide flare;
	restore_delay = 3000;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 1000;
		start-script RequestState(0);
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = base;
	move barrel to y-axis [0.000000] speed [400.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel to y-axis [7.000000] speed [8.000000];
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD;
		explode arm3 type NOHEATCLOUD;
		explode arm4 type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER;
		explode arm1 type NOHEATCLOUD | FALL;
		explode arm2 type NOHEATCLOUD | FALL;
		explode arm3 type NOHEATCLOUD | FALL;
		explode arm4 type NOHEATCLOUD | FALL;
		explode barrel type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | SHATTER;
		explode arm1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode arm2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode arm3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode arm4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode arm1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arm2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arm3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arm4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel type NOHEATCLOUD;
	return (corpsetype);
}
