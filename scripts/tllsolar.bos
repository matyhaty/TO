#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, doors, door1, door2, door3, door4, tower,
       dish1, dish2, dish3, dish4, dish5, dish6, disha, dishb,
       dishc, d1, d2, d3, d4, d5, d6;

static-var  statechg_DesiredState, statechg_StateChanging, Static_Var_3, Static_Var_4, Static_Var_5;


HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_3 == 0 )
		{
			Static_Var_3 = 1;
			hide door1;
			explode door1 type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_4 == 0 )
		{
			Static_Var_4 = 1;
			hide dish1;
			explode dish1 type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 35 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide door2;
			explode door2 type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	signal 16;
	set-signal-mask 16;
	set ACTIVATION to 0;
	sleep 16000;
	set ACTIVATION to 1;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 40 )
		{
			if( Static_Var_5 == 1 )
			{
				Static_Var_5 = 0;
				show door2;
			}
		}
		if( healthpercent >= 60 )
		{
			if( Static_Var_4 == 1 )
			{
				Static_Var_4 = 0;
				show dish1;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_3 == 1 )
			{
				Static_Var_3 = 0;
				show door1;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set ARMORED to 0;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	sleep 100;
	move door1 to z-axis [-6.000000] speed [17.000000];
	move door1 to x-axis [-6.000000] speed [17.000000];
	move door2 to z-axis [6.000000] speed [17.000000];
	move door2 to x-axis [-6.000000] speed [17.000000];
	move door3 to z-axis [6.000000] speed [17.000000];
	move door3 to x-axis [6.000000] speed [17.000000];
	move door4 to z-axis [-6.000000] speed [17.000000];
	move door4 to x-axis [6.000000] speed [17.000000];
	move tower to y-axis [0.000000] speed [28.000000];
	wait-for-move tower along y-axis;
	turn dish1 to y-axis <0.000000> speed <95.000000>;
	turn dish2 to y-axis <0.000000> speed <95.000000>;
	turn dish3 to y-axis <0.000000> speed <95.000000>;
	turn dish4 to y-axis <0.000000> speed <95.000000>;
	turn dish5 to y-axis <0.000000> speed <95.000000>;
	turn dish6 to y-axis <0.000000> speed <95.000000>;
	sleep 100;
	turn d1 to x-axis <-60.000000> speed <95.000000>;
	turn d2 to x-axis <60.000000> speed <95.000000>;
	turn d3 to x-axis <-60.000000> speed <95.000000>;
	turn d4 to x-axis <60.000000> speed <95.000000>;
	turn d5 to x-axis <-60.000000> speed <95.000000>;
	turn d6 to x-axis <60.000000> speed <95.000000>;
	sleep 100;
}

Stop()
{
	sleep 100;
	turn d1 to x-axis <0.000000> speed <85.000000>;
	turn d2 to x-axis <0.000000> speed <85.000000>;
	turn d3 to x-axis <0.000000> speed <85.000000>;
	turn d4 to x-axis <0.000000> speed <85.000000>;
	turn d5 to x-axis <0.000000> speed <85.000000>;
	turn d6 to x-axis <0.000000> speed <85.000000>;
	sleep 100;
	turn dish1 to y-axis <-90.000000> speed <85.000000>;
	turn dish2 to y-axis <-90.000000> speed <85.000000>;
	turn dish3 to y-axis <-90.000000> speed <85.000000>;
	turn dish4 to y-axis <-90.000000> speed <85.000000>;
	turn dish5 to y-axis <-90.000000> speed <85.000000>;
	turn dish6 to y-axis <-90.000000> speed <85.000000>;
	wait-for-turn d1 around x-axis;
	move tower to y-axis [-35.000000] speed [30.000000];
	wait-for-move tower along y-axis;
	move door1 to z-axis [0.000000] speed [20.000000];
	move door1 to x-axis [0.000000] speed [20.000000];
	move door2 to z-axis [0.000000] speed [20.000000];
	move door2 to x-axis [0.000000] speed [20.000000];
	move door3 to z-axis [0.000000] speed [20.000000];
	move door3 to x-axis [0.000000] speed [20.000000];
	move door4 to z-axis [0.000000] speed [20.000000];
	move door4 to x-axis [0.000000] speed [20.000000];
	wait-for-move door4 along z-axis;
	wait-for-move door4 along x-axis;
	set ARMORED to 1;
	sleep 500;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-cache tower;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache dish5;
	dont-cache dish6;
	dont-cache doors;
	dont-shade tower;
	dont-shade dish1;
	dont-shade dish2;
	dont-shade dish3;
	dont-shade dish4;
	dont-shade dish5;
	dont-shade dish6;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	move tower to y-axis [-31.000000] now;
	turn body to y-axis <25.000000> now;
	turn dishb to y-axis <120.000000> now;
	turn dishc to y-axis <240.000000> now;
	turn dish1 to y-axis <90.000000> now;
	turn dish2 to y-axis <90.000000> now;
	turn dish3 to y-axis <90.000000> now;
	turn dish4 to y-axis <90.000000> now;
	turn dish5 to y-axis <90.000000> now;
	turn dish6 to y-axis <90.000000> now;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode tower type NOHEATCLOUD;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode tower type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode tower type NOHEATCLOUD | SHATTER;
		explode door3 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode tower type NOHEATCLOUD | SHATTER;
	explode door3 type NOHEATCLOUD;
	return (corpsetype);
}
