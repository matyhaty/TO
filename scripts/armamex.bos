#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arms, panel1, panel2, panel3, panel4, rod, edges;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

fixGo()
{
	set ARMORED to 0;
	move rod to y-axis [3.000000] speed [25.000000];
	move edges to y-axis [-3.000000] speed [25.000000];
	move panel1 to y-axis [5.000000] speed [10.000000];
	move panel2 to y-axis [5.000000] speed [10.000000];
	move panel3 to y-axis [5.000000] speed [10.000000];
	move panel4 to y-axis [5.000000] speed [10.000000];
	turn panel1 to x-axis <-90.016484> speed <40.000000>;
	turn panel2 to x-axis <90.016484> speed <40.000000>;
	turn panel3 to z-axis <90.016484> speed <40.000000>;
	turn panel4 to z-axis <-90.016484> speed <40.000000>;
	spin arms around y-axis speed Static_Var_1 accelerate Static_Var_2;
	spin panel1 around y-axis speed Static_Var_1 accelerate Static_Var_2;
	spin panel2 around y-axis speed Static_Var_1 accelerate Static_Var_2;
	spin panel3 around y-axis speed Static_Var_1 accelerate Static_Var_2;
	spin panel4 around y-axis speed Static_Var_1 accelerate Static_Var_2;
}

Stop()
{
	stop-spin arms around y-axis decelerate Static_Var_3;
	turn panel1 to x-axis <0.000000> speed <60.000000>;
	turn panel2 to x-axis <0.000000> speed <60.000000>;
	turn panel3 to z-axis <0.000000> speed <60.000000>;
	turn panel4 to z-axis <0.000000> speed <60.000000>;
	wait-for-turn panel1 around x-axis;
	move rod to y-axis [0.000000] speed [25.000000];
	move edges to y-axis [0.000000] speed [25.000000];
	move panel1 to y-axis [0.000000] speed [10.000000];
	move panel2 to y-axis [0.000000] speed [10.000000];
	move panel3 to y-axis [0.000000] speed [10.000000];
	move panel4 to y-axis [0.000000] speed [10.000000];
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script fixGo();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 91;
	Static_Var_3 = 182;
	dont-shade arms;
	dont-cache arms;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	call-script fixGo();
	start-script RequestState(0);
}

Deactivate()
{
	call-script Stop();
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 10;
}

HitByWeapon(anglex, anglez)
{
	signal 2;
	set-signal-mask 2;
	set ACTIVATION to 0;
	sleep 8000;
	set ACTIVATION to 100;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arms type NOHEATCLOUD;
		explode panel1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode panel2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode panel3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode panel4 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arms type NOHEATCLOUD | SHATTER;
		explode panel1 type NOHEATCLOUD | SHATTER | FIRE | EXPLODE_ON_HIT;
		explode panel2 type NOHEATCLOUD | SHATTER | FIRE | EXPLODE_ON_HIT;
		explode panel3 type NOHEATCLOUD | SHATTER | FIRE | EXPLODE_ON_HIT;
		explode panel2 type NOHEATCLOUD | SHATTER | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arms type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD | SHATTER | SMOKE | FIRE;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arms type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
