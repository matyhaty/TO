#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, canon1, canon2, barrel1, barrel2, barrel3, barrel4,
       flare1, flare2, flare3, flare4, flare5, flare6, roue1, roue2,
       roue3, roue4, ptroue1, ptroue2, ptroue3, ptroue4, ptroue5, ptroue6;

static-var  restore_delay, gun_1, gun_2, gun_3;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	gun_1 = turret;
	gun_2 = turret;
	gun_3 = turret;
	dont-cache turret;
	restore_delay = 10000;
	start-script SmokeUnit();
}

StartMoving()
{
	spin roue1 around x-axis speed <70.016484>;
	spin roue2 around x-axis speed <70.016484>;
	spin roue3 around x-axis speed <70.016484>;
	spin roue4 around x-axis speed <70.016484>;
	spin ptroue1 around x-axis speed <70.016484>;
	spin ptroue2 around x-axis speed <70.016484>;
	spin ptroue3 around x-axis speed <70.016484>;
	spin ptroue4 around x-axis speed <70.016484>;
	spin ptroue5 around x-axis speed <70.016484>;
	spin ptroue6 around x-axis speed <70.016484>;
}

StopMoving()
{
	stop-spin roue1 around x-axis;
	stop-spin roue2 around x-axis;
	stop-spin roue3 around x-axis;
	stop-spin roue4 around x-axis;
	stop-spin ptroue1 around x-axis;
	stop-spin ptroue2 around x-axis;
	stop-spin ptroue3 around x-axis;
	stop-spin ptroue4 around x-axis;
	stop-spin ptroue5 around x-axis;
	stop-spin ptroue6 around x-axis;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	wait-for-turn canon2 around y-axis;
	wait-for-turn canon2 around y-axis;
	wait-for-turn canon1 around y-axis;
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <30.000000>;
	turn canon1 to y-axis <0.000000> speed <30.000000>;
	turn canon2 to y-axis <0.000000> speed <30.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn canon1 to y-axis heading speed <100.000000>;
	wait-for-turn canon1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn canon2 to y-axis heading speed <100.000000>;
	wait-for-turn canon2 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret to y-axis heading speed <60.000000>;
	wait-for-turn canon2 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		move barrel1 to z-axis [-3.000000] now;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [3.000000];
		gun_1 = canon1;
		return (0);
	}
	if( gun_1 == 2 )
	{
		move barrel2 to z-axis [-3.000000] now;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		gun_1 = turret;
		return (0);
	}
}

FireSecondary()
{
	if( gun_2 == 1 )
	{
		move barrel3 to z-axis [-3.000000] now;
		sleep 150;
		move barrel3 to z-axis [0.000000] speed [3.000000];
		gun_2 = canon1;
		return (0);
	}
	if( gun_2 == 2 )
	{
		move barrel4 to z-axis [-3.000000] now;
		sleep 150;
		move barrel4 to z-axis [0.000000] speed [3.000000];
		gun_2 = turret;
		return (0);
	}
}

FireTertiary()
{
	if( gun_3 == 1 )
	{
		gun_3 = canon1;
		return (0);
	}
	if( gun_3 == 2 )
	{
		gun_3 = turret;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 1 )
	{
		piecenum = flare3;
	}
	if( gun_2 == 2 )
	{
		piecenum = flare4;
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = flare5;
	}
	if( gun_3 == 2 )
	{
		piecenum = flare6;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode canon1 type NOHEATCLOUD;
		explode canon2 type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		explode barrel4 type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode flare3 type NOHEATCLOUD;
		explode flare4 type NOHEATCLOUD;
		explode flare5 type NOHEATCLOUD;
		explode flare6 type NOHEATCLOUD;
		explode roue1 type NOHEATCLOUD;
		explode roue2 type NOHEATCLOUD;
		explode roue3 type NOHEATCLOUD;
		explode roue4 type NOHEATCLOUD;
		explode ptroue1 type NOHEATCLOUD;
		explode ptroue2 type NOHEATCLOUD;
		explode ptroue3 type NOHEATCLOUD;
		explode ptroue4 type NOHEATCLOUD;
		explode ptroue5 type NOHEATCLOUD;
		explode ptroue6 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD | SHATTER;
		explode canon1 type NOHEATCLOUD | FALL;
		explode canon2 type NOHEATCLOUD | FALL;
		explode barrel1 type NOHEATCLOUD | FALL;
		explode barrel2 type NOHEATCLOUD | FALL;
		explode barrel3 type NOHEATCLOUD | FALL;
		explode barrel4 type NOHEATCLOUD | FALL;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode flare3 type NOHEATCLOUD;
		explode flare4 type NOHEATCLOUD;
		explode flare5 type NOHEATCLOUD;
		explode flare6 type NOHEATCLOUD;
		explode roue1 type NOHEATCLOUD | FALL;
		explode roue2 type NOHEATCLOUD | FALL;
		explode roue3 type NOHEATCLOUD | FALL;
		explode roue4 type NOHEATCLOUD | FALL;
		explode ptroue1 type NOHEATCLOUD | FALL;
		explode ptroue2 type NOHEATCLOUD | FALL;
		explode ptroue3 type NOHEATCLOUD | FALL;
		explode ptroue4 type NOHEATCLOUD | FALL;
		explode ptroue5 type NOHEATCLOUD | FALL;
		explode ptroue6 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode canon1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode canon2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode flare3 type NOHEATCLOUD;
		explode flare4 type NOHEATCLOUD;
		explode flare5 type NOHEATCLOUD;
		explode flare6 type NOHEATCLOUD;
		explode roue1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roue2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roue3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roue4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ptroue1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ptroue2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ptroue3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ptroue4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ptroue5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ptroue6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode canon1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode canon2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare1 type NOHEATCLOUD;
	explode flare2 type NOHEATCLOUD;
	explode flare3 type NOHEATCLOUD;
	explode flare4 type NOHEATCLOUD;
	explode flare5 type NOHEATCLOUD;
	explode flare6 type NOHEATCLOUD;
	explode roue1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roue2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roue3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roue4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ptroue1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ptroue2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ptroue3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ptroue4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ptroue5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ptroue6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
