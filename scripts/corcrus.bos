#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wake1, wake2, chrgflare, turret, sleeve, barrels, foreturret,
       foregun, foreflare, aftturret, aftgun, aftflare, flare1, flare2, ground;

static-var  restore_delay, gun_2, gun_1, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_AIM_2			2
#define SIG_AIM				4
#define SIG_MOVE			8


SetDirection(heading)
{
	var Func_Var_2;
	Func_Var_2 = ( get ABS(Static_Var_5) - get ABS(heading) ) / 2;
	turn ground to y-axis heading speed Func_Var_2;
	turn base to y-axis <0.000000> - heading speed Func_Var_2;
	Static_Var_5 = heading;
}

RockOnWaves(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 238 )
		{
			Func_Var_3 = 263 - get ABS(Func_Var_2);
			turn ground to x-axis Func_Var_2 speed Func_Var_3 * <0.021978>;
			wait-for-turn ground around x-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	gun_1 = base;
	gun_2 = base;
	Static_Var_4 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <45.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;
}

RestoreDeckLaser()
{
	sleep 3000;
	set-signal-mask 0;
	turn foreturret to y-axis <0.000000> speed <150.000000>;
	turn foregun to x-axis <0.000000> speed <100.000000>;
	turn aftturret to y-axis <0.000000> speed <150.000000>;
	turn aftgun to x-axis <0.000000> speed <100.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.000000> speed <3.000000>;
		move base to y-axis [0.319995] speed [0.250000];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <3.000000>;
		move base to y-axis [0.000000] speed [0.250000];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 4 from wake2;
		Func_Var_1 = get CURRENT_SPEED * 100 / get MAX_SPEED;
		if( Func_Var_1 < 50 )
		{
			Func_Var_1 = 50;
		}
		sleep 12000 / Func_Var_1;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <3.000000>;
	move base to y-axis [0.000000] speed [0.250000];
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( gun_2 )
	{
		turn aftturret to y-axis heading speed <300.000000>;
		turn aftgun to x-axis <0.000000> - pitch speed <200.000000>;
		wait-for-turn aftturret around y-axis;
		wait-for-turn aftgun around x-axis;
	}
	else
	{
		turn foreturret to y-axis heading speed <300.000000>;
		turn foregun to x-axis <0.000000> - pitch speed <200.000000>;
		wait-for-turn foreturret around y-axis;
		wait-for-turn foregun around x-axis;
	}
	start-script RestoreDeckLaser();
	return (1);
}

FireSecondary()
{
	if( gun_2 )
	{
		show aftflare;
		sleep 150;
		hide aftflare;
	}
	else
	{
		show foreflare;
		sleep 150;
		hide foreflare;
	}
	gun_2 = !gun_2;
}

AimFromSecondary(piecenum)
{
	if( gun_2 )
	{
		piecenum = aftgun;
	}
	else
	{
		piecenum = foregun;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 )
	{
		piecenum = aftflare;
	}
	else
	{
		piecenum = foreflare;
	}
}

AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	sleep 150;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

QueryTertiary(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <90.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	else
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	piecenum = 13 + gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeve type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode barrels type NOHEATCLOUD;
		explode foreturret type NOHEATCLOUD;
		explode aftturret type NOHEATCLOUD;
		explode foregun type NOHEATCLOUD;
		explode aftgun type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD;
		explode wake2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode barrels type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode foreturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode aftturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode foregun type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode aftgun type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode wake1 type NOHEATCLOUD | FALL;
		explode wake2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode barrels type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode foreturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode aftturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode foregun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode aftgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wake1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wake2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode turret type NOHEATCLOUD;
	explode barrels type NOHEATCLOUD;
	explode sleeve type NOHEATCLOUD;
	explode foreturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode aftturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode foregun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode aftgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wake1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wake2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
