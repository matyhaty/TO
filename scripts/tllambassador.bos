#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, arms1, arms2, arms3, arms4, arms5, link,
       door1, door2, wake1, wake2, wake3, weight, magnet;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;

// Signal definitions
#define SIG_MOVE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	turn turret to y-axis <180.000000> speed <1000.000000>;
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	turn door1 to z-axis <-90.000000> speed <50.000000>;
	turn door2 to z-axis <90.000000> speed <50.000000>;
	sleep 5000;
	turn door1 to z-axis <0.000000> speed <20.000000>;
	turn door2 to z-axis <0.000000> speed <20.000000>;
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret) - posxz;
	Func_Var_4 = posy - get PIECE_Y(turret) - [20.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_1 = get HYPOT(Func_Var_5,Func_Var_4) - [20.000000];
	Static_Var_2 = get XZ_ATAN(Func_Var_3);
	Static_Var_3 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_4 = Static_Var_1 < [80.000000];
}

BoomExtend()
{
	start-script StartDoorOpen();
	turn turret to y-axis Static_Var_2 speed <80.000000>;
	turn magnet to x-axis Static_Var_3 speed <40.000000>;
	turn weight to x-axis Static_Var_3 speed <40.000000>;
	turn arms1 to x-axis <0.000000> - Static_Var_3 speed <40.000000>;
	move arms2 to z-axis Static_Var_1 / [0.000024] speed [30.000000];
	move arms3 to z-axis Static_Var_1 / [0.000024] speed [30.000000];
	move arms4 to z-axis Static_Var_1 / [0.000024] speed [30.000000];
	move arms5 to z-axis Static_Var_1 / [0.000024] speed [30.000000];
	wait-for-turn turret around y-axis;
	wait-for-turn arms1 around x-axis;
	wait-for-move arms2 along z-axis;
	wait-for-move arms3 along z-axis;
}

BoomReset()
{
	turn turret to y-axis <180.000000> speed <40.000000>;
	turn magnet to x-axis <0.000000> speed <30.000000>;
	turn weight to x-axis <0.000000> speed <30.000000>;
	turn arms1 to x-axis <0.000000> speed <30.000000>;
	move arms2 to z-axis [0.000000] speed [25.000000];
	move arms3 to z-axis [0.000000] speed [25.000000];
	move arms4 to z-axis [0.000000] speed [25.000000];
	move arms5 to z-axis [0.000000] speed [25.000000];
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn turret to y-axis <180.000000> speed <50.000000>;
	turn magnet to x-axis <0.000000> speed <30.000000>;
	turn weight to x-axis <0.000000> speed <30.000000>;
	turn arms1 to x-axis <0.000000> speed <30.000000>;
	move arms2 to z-axis [0.000000] speed [30.000000];
	move arms3 to z-axis [0.000000] speed [30.000000];
	move arms4 to z-axis [0.000000] speed [30.000000];
	move arms5 to z-axis [0.000000] speed [30.000000];
	wait-for-turn turret around y-axis;
	wait-for-turn arms1 around x-axis;
	wait-for-move arms2 along z-axis;
	wait-for-move arms3 along z-axis;
	turn magnet to x-axis <-30.000000> speed <30.000000>;
	turn weight to x-axis <-30.000000> speed <30.000000>;
	turn arms1 to x-axis <30.000000> speed <30.000000>;
	wait-for-turn arms1 around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 )
	{
		set BUSY to 1;
		call-script BoomToPad();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arms1 type NOHEATCLOUD;
		explode arms2 type NOHEATCLOUD;
		explode arms3 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode link type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD;
		explode wake2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arms1 type NOHEATCLOUD;
		explode arms2 type NOHEATCLOUD | SHATTER;
		explode arms3 type NOHEATCLOUD | SHATTER;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode link type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD | FALL;
		explode wake2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arms1 type NOHEATCLOUD;
		explode arms2 type NOHEATCLOUD | SHATTER;
		explode arms3 type NOHEATCLOUD | SHATTER;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode link type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wake2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arms1 type NOHEATCLOUD;
	explode arms2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode arms3 type NOHEATCLOUD | SHATTER;
	explode base type NOHEATCLOUD;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode link type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD;
	explode wake1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wake2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
