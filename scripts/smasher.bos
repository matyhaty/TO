#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lgun, rgun, rrocket, rflare, lrocket, lflare, base, rotor,
       rearrotor, fuselage, rgflare, lgflare;

static-var  gun_1, gun_2, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		spin rotor around y-axis speed <800.192308>;
		spin rearrotor around x-axis speed <800.192308>;
		sleep 1454;
	}
	sleep 15;
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin rotor around y-axis decelerate <2.000000>;
		stop-spin rearrotor around x-axis decelerate <2.000000>;
		sleep 1453;
	}
	sleep 9;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from rearrotor;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide lgflare;
	hide rgflare;
	gun_1 = lgun;
	gun_2 = lgun;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		++gun_1;
		if( gun_1 == 4 )
		{
			gun_1 = rgun;
		}
		move rrocket to z-axis [-1.000000] speed [400.000000];
		sleep 150;
		wait-for-move rrocket along z-axis;
		move rrocket to z-axis [0.000000] speed [2.000000];
		return (0);
		if( gun_1 == 1 )
		{
			++gun_1;
			if( gun_1 == 4 )
			{
				gun_1 = lgun;
			}
			move lrocket to z-axis [-1.000000] speed [400.000000];
			sleep 150;
			wait-for-move lrocket along z-axis;
			move lrocket to z-axis [0.000000] speed [2.000000];
			return (0);
		}
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rrocket;
	}
	if( gun_1 == 1 )
	{
		piecenum = lrocket;
	}
}

Firesecondary()
{
	if( gun_2 == 0 )
	{
		++gun_2;
		if( gun_2 == 4 )
		{
			gun_2 = rgun;
		}
		move rgun to z-axis [-1.000000] speed [400.000000];
		sleep 150;
		wait-for-move rgun along z-axis;
		move rgun to z-axis [0.000000] speed [3.000000];
		return (0);
	}
	if( gun_2 == 1 )
	{
		++gun_2;
		if( gun_2 == 4 )
		{
			gun_2 = lgun;
		}
		move lgun to z-axis [-1.000000] speed [400.000000];
		sleep 150;
		wait-for-move lgun along z-axis;
		move lgun to z-axis [0.000000] speed [3.000000];
		return (0);
	}
}

Shot2()
{
	if( gun_2 == 0 )
	{
		emit-sfx 1024 + 0 from rgflare;
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1024 + 0 from rgflare;
	}
}

QuerySecondary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rgun;
	}
	if( gun_1 == 1 )
	{
		piecenum = lgun;
	}
}

AimPrimary()
{
	return (1);
}

AimSecondary()
{
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode fuselage type NOHEATCLOUD;
		explode rrocket type NOHEATCLOUD;
		explode lrocket type NOHEATCLOUD;
		explode rotor type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rearrotor type NOHEATCLOUD;
		explode rgun type NOHEATCLOUD;
		explode lgun type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode fuselage type NOHEATCLOUD;
		explode rrocket type NOHEATCLOUD | FALL;
		explode lrocket type NOHEATCLOUD | FALL;
		explode rotor type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rearrotor type NOHEATCLOUD | FALL;
		explode rgun type NOHEATCLOUD | SHATTER;
		explode lgun type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode fuselage type NOHEATCLOUD;
		explode rrocket type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lrocket type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rotor type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rearrotor type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rgun type NOHEATCLOUD | SHATTER;
		explode lgun type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode fuselage type NOHEATCLOUD;
	explode rrocket type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rrocket type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rotor type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rearrotor type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rgun type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode lgun type NOHEATCLOUD;
	return (corpsetype);
}
