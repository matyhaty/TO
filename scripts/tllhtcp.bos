#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, doors, d1, d2, d3, d4, lights,
       pad, spray1, spray2, spray3, nano;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	set ARMORED to 0;
	dont-cache d1;
	dont-cache d2;
	dont-cache d3;
	dont-cache d4;
	dont-cache pad;
	dont-cache nano;
	turn d1 to z-axis <5.000000> speed <100.000000>;
	turn d2 to z-axis <5.000000> speed <100.000000>;
	turn d3 to z-axis <-5.000000> speed <100.000000>;
	turn d4 to z-axis <-5.000000> speed <100.000000>;
	sleep 75;
	turn d1 to z-axis <-60.000000> speed <50.000000>;
	turn d2 to z-axis <-60.000000> speed <50.000000>;
	turn d3 to z-axis <60.000000> speed <50.000000>;
	turn d4 to z-axis <60.000000> speed <50.000000>;
	wait-for-turn d4 around z-axis;
	turn d1 to z-axis <-80.000000> speed <20.000000>;
	turn d2 to z-axis <-80.000000> speed <20.000000>;
	turn d3 to z-axis <80.000000> speed <20.000000>;
	turn d4 to z-axis <80.000000> speed <20.000000>;
	sleep 800;
	wait-for-turn d4 around z-axis;
	dont-cache lights;
	sleep 50;
}

deactivatescr()
{
	cache lights;
	if( TRUE )
	{
		turn d1 to z-axis <-20.000000> speed <50.000000>;
		turn d2 to z-axis <-20.000000> speed <50.000000>;
		turn d3 to z-axis <20.000000> speed <50.000000>;
		turn d4 to z-axis <20.000000> speed <50.000000>;
		wait-for-turn d4 around z-axis;
	}
	if( TRUE )
	{
		turn d1 to z-axis <5.000000> speed <20.000000>;
		turn d2 to z-axis <5.000000> speed <20.000000>;
		turn d3 to z-axis <-5.000000> speed <20.000000>;
		turn d4 to z-axis <5.000000> speed <20.000000>;
		wait-for-turn d4 around z-axis;
	}
	if( TRUE )
	{
		turn d1 to z-axis <0.000000> speed <50.000000>;
		turn d2 to z-axis <0.000000> speed <50.000000>;
		turn d3 to z-axis <0.000000> speed <50.000000>;
		turn d4 to z-axis <0.000000> speed <50.000000>;
		wait-for-turn d4 around z-axis;
	}
	cache pad;
	cache nano;
	cache d1;
	cache d2;
	cache d3;
	cache d4;
	set ARMORED to 1;
	sleep 50;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade body;
	dont-shade d1;
	dont-shade d2;
	dont-shade d3;
	dont-shade d4;
	dont-shade pad;
	dont-shade lights;
	dont-shade nano;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = spray1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = spray2;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = spray3;
	}
	++Static_Var_1;
	if( Static_Var_1 >= 3 )
	{
		Static_Var_1 = 0;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin nano around y-axis speed <30.000000> accelerate <2.000000>;
}

StopBuilding()
{
	stop-spin nano around y-axis decelerate <2.000000>;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	explode d1 type NOHEATCLOUD;
	explode d2 type NOHEATCLOUD;
	explode pad type NOHEATCLOUD;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode pad type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode nano type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode lights type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
