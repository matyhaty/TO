#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beama, beamb, section1, section2, guna, gunb,
       dish;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		move section1 to x-axis [0.000000] now;
		move section1 to x-axis [5.850000] speed [12.607770];
		sleep 464;
	}
	if( TRUE )
	{
		sleep 266;
	}
	if( TRUE )
	{
		move section2 to x-axis [4.500000] speed [6.923077];
		move section2 to z-axis [2.100000] speed [3.230768];
		sleep 650;
	}
	if( TRUE )
	{
		sleep 274;
	}
	if( TRUE )
	{
		move guna to x-axis [7.050000] speed [10.730591];
		move gunb to x-axis [4.850000] speed [7.382037];
		move gunb to z-axis [2.000000] speed [3.044135];
		sleep 657;
	}
	if( TRUE )
	{
		sleep 134;
	}
	if( TRUE )
	{
		move guna to z-axis [2.500000] speed [5.197504];
		move gunb to x-axis [3.650000] speed [2.494800];
		move gunb to z-axis [4.149994] speed [4.469849];
		turn gunb to y-axis <9.576923> speed <19.912088>;
		sleep 481;
	}
	sleep 56;
}

deactivatescr()
{
	if( TRUE )
	{
		move section1 to x-axis [5.850000] now;
		move section2 to x-axis [4.500000] now;
		move section2 to z-axis [2.100000] now;
		move guna to x-axis [7.050000] now;
		move guna to z-axis [2.500000] now;
		move guna to z-axis [0.000000] speed [5.896222];
		move gunb to x-axis [3.650000] now;
		move gunb to x-axis [4.850000] speed [2.830188];
		move gunb to z-axis [4.149994] now;
		move gunb to z-axis [2.000000] speed [5.070752];
		turn gunb to y-axis <9.576923> now;
		turn gunb to y-axis <0.000000> speed <22.587912>;
		sleep 424;
	}
	if( TRUE )
	{
		sleep 428;
	}
	if( TRUE )
	{
		move guna to x-axis [0.000000] speed [12.864960];
		move gunb to x-axis [0.000000] speed [8.850366];
		move gunb to z-axis [0.000000] speed [3.649634];
		sleep 548;
	}
	if( TRUE )
	{
		sleep 152;
	}
	if( TRUE )
	{
		move section2 to x-axis [0.000000] speed [8.166968];
		move section2 to z-axis [0.000000] speed [3.811249];
		sleep 551;
	}
	if( TRUE )
	{
		sleep 149;
	}
	if( TRUE )
	{
		move section1 to x-axis [0.000000] speed [12.857153];
		sleep 455;
	}
	sleep 90;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beama;
	dont-cache beamb;
	dont-cache guna;
	dont-cache gunb;
	dont-cache pad;
	dont-cache section1;
	dont-cache section2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beama;
	cache beamb;
	cache guna;
	cache gunb;
	cache pad;
	cache section1;
	cache section2;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-cache dish;
	dont-shade dish;
	dont-shade beama;
	dont-shade beamb;
	dont-shade guna;
	dont-shade gunb;
	dont-shade pad;
	dont-shade section1;
	dont-shade section2;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin dish around y-axis speed <150.032967>;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beama;
	}
	if( spray != 0 )
	{
		piecenum = beamb;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode beama type NOHEATCLOUD;
		explode beamb type NOHEATCLOUD;
		explode dish type NOHEATCLOUD;
		explode guna type NOHEATCLOUD;
		explode gunb type NOHEATCLOUD;
		explode pad type NOHEATCLOUD;
		explode section1 type NOHEATCLOUD;
		explode section2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode beama type NOHEATCLOUD | FALL;
		explode beamb type NOHEATCLOUD | FALL;
		explode dish type NOHEATCLOUD | FALL;
		explode guna type NOHEATCLOUD | FALL;
		explode gunb type NOHEATCLOUD | FALL;
		explode pad type NOHEATCLOUD;
		explode section1 type NOHEATCLOUD;
		explode section2 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode beama type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode beamb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode dish type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode guna type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gunb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pad type NOHEATCLOUD;
		explode section1 type NOHEATCLOUD;
		explode section2 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode beama type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode beamb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode dish type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode guna type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gunb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pad type NOHEATCLOUD;
	explode section1 type NOHEATCLOUD;
	explode section2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
