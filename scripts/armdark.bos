#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel, flare1, flare2, roue1, roue2;

static-var  restore_delay, gun_1, gun_2;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	gun_1 = turret;
	gun_2 = turret;
	restore_delay = 3000;
	start-script SmokeUnit();
}

StartMoving()
{
	spin roue1 around x-axis speed <60.010989>;
	spin roue2 around x-axis speed <60.010989>;
}

StopMoving()
{
	stop-spin roue1 around x-axis;
	stop-spin roue2 around x-axis;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <35.000000>;
	turn barrel to x-axis <0.000000> speed <15.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70.000000>;
	turn barrel to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 5 )
	{
		gun_1 = turret;
	}
}

FireSecondary()
{
	++gun_2;
	if( gun_2 == 5 )
	{
		gun_2 = turret;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode roue1 type NOHEATCLOUD;
		explode roue2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD | SHATTER;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		explode roue1 type NOHEATCLOUD | FALL;
		explode roue2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roue1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roue2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare1 type NOHEATCLOUD;
	explode flare2 type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roue1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roue2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
